---
description: 
globs: 
alwaysApply: false
---
# Payload CMS Seeding Guidelines

This document outlines best practices for creating and maintaining seed functions for Payload CMS, particularly within this project.

Refer to the main seed implementation: [src/endpoints/seed/index.ts](mdc:src/endpoints/seed/index.ts)

## Core Principles

### 1. Execution Strategy
- **Sequential Creation for Dependencies:** Create documents with dependencies sequentially using `for...of` loops or individual `await` calls
- **Parallelization for Independence:** Use `Promise.all` for independent operations (clearing, fetching external resources, creating unrelated documents)

### 2. Function Design Patterns
- **Modular Seed Functions:** Create separate files for each collection/feature (e.g., `./faq.ts`, `./testimonials.ts`)
- **Structured Parameters:** Accept dependencies as organized objects rather than individual parameters:
  ```typescript
  export async function seedFAQs(
    payload: Payload,
    req: PayloadRequest,
    categories: {
      sellCategory?: Category
      operateCategory?: Category
      manageCategory?: Category
      otherCategory?: Category
    }
  ): Promise<FAQsResult>
  ```

### 3. Error Handling & Resilience
- **Graceful Parallel Failures:** Use the Promise.all + filter pattern for parallel creation with individual error handling:
  ```typescript
  const promises = data.map(async (item) => {
    try {
      return await payload.create({ collection: 'items', data: item, req })
    } catch (error) {
      payload.logger.error(`Failed to create item: ${error.message}`)
      return null  // Return null on error
    }
  })
  
  const results = await Promise.all(promises)
  const successful = results.filter(Boolean)  // Remove nulls
  ```

### 4. Relationship Management
- **Defensive Referencing:** Use optional chaining for relationship IDs to prevent runtime errors:
  ```typescript
  category: categories.sellCategory?.id,
  ```
- **Dependency Storage:** Store created document results in variables/maps for linking related documents

## Content & Data Patterns

### 5. Rich Text (Lexical) Content
- **Multi-level RTL Direction:** For Arabic/RTL content, set direction at both root and element levels:
  ```typescript
  answer: {
    root: {
      type: 'root',
      direction: 'rtl' as const,  // Root level
      children: [{
        type: 'paragraph',
        direction: 'rtl' as const,  // Element level too
        children: [{ type: 'text', text: 'النص العربي' }]
      }]
    }
  }
  ```

### 6. Complex Field Types
- **Polymorphic Fields:** Match data structure to specific variant using `blockType` or `type` discriminators
- **Link Objects:** Use correct structure for link type (`type: 'reference'` vs `type: 'custom'`)
- **Icon Fields:** Provide valid icon identifiers from the configured icon set

### 7. Content Organization
- **Domain-Specific Structuring:** Organize content by functional areas (e.g., sell/operate/manage for POS systems) rather than randomly
- **Contextual Relevance:** Create content that matches the business domain and user needs

## Technical Implementation

### 8. Type Safety
- **Generated Types:** Use Payload's generated types from `src/payload-types.ts`
- **Type Casting:** Cast `payload.create` results when TypeScript can't infer: `as Post`
- **Complex Globals:** Use `data: yourData as any` for complex globals when precise typing is difficult, but ensure structural correctness

### 9. Localization
- **Locale Setting:** Set `locale` property on localized documents
- **Content Adaptation:** Update slugs, URLs, and locale-specific text accordingly

### 10. Performance & Operations
- **Logging Strategy:** Add comprehensive logs (`payload.logger.info`, `payload.logger.error`) for major steps and progress tracking
- **Revalidation Awareness:** Use `context: { disableRevalidate: true }` when seeding outside Next.js application context
- **Iterative Development:** Leverage linter feedback and test thoroughly

## Integration Workflow

### 11. Main Seed Integration
Follow this consistent pattern for adding new seeding functions:

```typescript
// 1. Import
import { seedFAQs } from './faq'

// 2. Call with structured parameters
payload.logger.info('— Seeding FAQs...')
await seedFAQs(payload, req, {
  sellCategory,
  operateCategory,
  manageCategory,
  otherCategory: other,  // Alias if needed
})
```

## Example Pattern

```typescript
export const seed = async ({ payload, req }: { payload: Payload; req: PayloadRequest }) => {
  payload.logger.info('Seeding database...')

  // 1. Clear data (parallel)
  payload.logger.info('— Clearing collections and globals...')
  await Promise.all([
    // Clear operations
  ])

  // 2. Seed prerequisites (sequential for dependencies)
  payload.logger.info('— Seeding categories...')
  const categories = await seedCategories(payload, req)
  
  // 3. Fetch external resources (parallel)
  payload.logger.info('— Fetching media files...')
  const files = await Promise.all([fetchFileByURL(url1), fetchFileByURL(url2)])

  // 4. Seed content with dependencies (sequential)
  payload.logger.info('— Seeding FAQs...')
  await seedFAQs(payload, req, { categories })

  // 5. Update globals
  payload.logger.info('— Seeding globals...')
  await payload.updateGlobal({ slug: 'header', data: headerData })

  payload.logger.info('Seeded database successfully!')
}
```
