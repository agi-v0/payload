---
description: 
globs: 
alwaysApply: false
---

Working with the project's design system.

**1. Prioritize Theme Variables (`globals.css` `@theme`):**

*   **Golden Rule:** Always favor using Tailwind utility classes generated from the CSS variables defined within the `@theme { ... }` block in `src/app/(frontend)/[locale]/globals.css`.
*   **Correct Usage:** Use classes like `text-base-primary`, `bg-background-light`, `p-space-md`, `gap-space-sm`, `text-h3`, `rounded-space-sm`, etc.
*   **Avoid:**
    *   Directly using variables defined only in `:root` or `[data-theme='dark']` (like `--neutral-primary`) in Tailwind classes, as these might not have corresponding utility classes.
    *   Hardcoding pixel/rem values (e.g., `p-8`, `text-[31px]`, `gap-4`) when a theme spacing or text size variable (`p-space-lg`, `text-h3`, `gap-space-sm`) provides a semantic equivalent.
    *   Using arbitrary hex colors or Tailwind color palette classes (e.g., `bg-gray-50`, `text-gray-900`) if a theme color variable (`bg-background-light`, `text-base-primary`) fits the purpose.
*   **Dark Mode:** Using the `base-*` theme variables correctly generally ensures dark mode compatibility (`dark:*` variants are often handled by the variable definitions themselves or should be applied minimally where needed, like specific borders).

**2. Map Design Specs to Theme Variables:**

*   When translating designs (e.g., from Figma), identify the intended color, spacing, font size, or radius.
*   Find the closest matching variable within the `@theme` block in `globals.css`.
*   Use the corresponding utility class (`p-space-lg` for `--spacing-space-lg`, `text-h4` for `--text-h4`, etc.).
*   If an exact match doesn't exist, use the semantiall back to standard Tailwind classes or specific values if no theme variable is suitable.

**3. Data Source is Payload Types:**

*   Always refer to `src/payload-types.ts` for the expected data structure of props coming from the CMS (e.g., `Testimonial` type).
*   Structure your compternal logic based *only* on the fields defined in these types.
*   If a design requires data not present in the types (like the `customerStoryLink` we encountered), the Payload collection schema must be updated first, and then types regenerated (`pnpm generate:types`).

**4. Leverage Existing Components & Utilities:**

*   Use Shadcn/UI components (`@/components/ui`) for standard UI elements.
*   Use general reusable components from `src/components`.
*   Use the `<Media />` component (`@/components/Media`) for rendering images/media from Payload.
*   Use the `cn` utility (`@/utilities/ui`) for merging or conditionally applying classes.

**5. Follow Code Standards:**

*   Adhere to TypeScript best practices.
*   Ensure code passes ESLint checks and is formatted according to Prettier rules (which includes Tailwind class sorting).
*   Use `@/*` path aliases for cleaner imports.

**6. Internationalization:**

*   Use `getTranslations` from `next-intl/server` for text in Server Components.
*   Use the internationalized `<Link>` component from `@/i18n/routing`.


By following these guidelines, especially prioritizing the `@theme` variables, we can ensure components are consistent, maintainable, and correctly adapt to the defined design system, including themes like dark mode.
