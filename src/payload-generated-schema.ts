/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  boolean,
  text,
  jsonb,
  numeric,
  serial,
  timestamp,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-vercel-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-vercel-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'ar'])
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const link_color = pgEnum('link_color', ['brand', 'neutral'])
export const link_variant = pgEnum('link_variant', [
  'primary',
  'secondary',
  'tertiary',
  'ghost',
  'link',
])
export const enum_pages_blocks_apps_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_apps_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_apps_body_links_link_type = pgEnum(
  'enum_pages_blocks_apps_body_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_apps_block_header_type = pgEnum(
  'enum_pages_blocks_apps_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_apps_block_header_badge_type = pgEnum(
  'enum_pages_blocks_apps_block_header_badge_type',
  ['label', 'reference'],
)
export const badge_color = pgEnum('badge_color', ['blue', 'red', 'green', 'yellow'])
export const badge_icon_position = pgEnum('badge_icon_position', ['flex-row', 'flex-row-reverse'])
export const enum_pages_blocks_apps_type = pgEnum('enum_pages_blocks_apps_type', [
  'appsBlock01',
  'appsBlock02',
  'appsBlock03',
  'appsBlock04',
  'appsBlockHero',
])
export const enum_pages_blocks_apps_body_badge_type = pgEnum(
  'enum_pages_blocks_apps_body_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_cta_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_cta_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_block_header_type = pgEnum(
  'enum_pages_blocks_cta_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_cta_block_header_badge_type = pgEnum(
  'enum_pages_blocks_cta_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_content_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_content_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_block_header_type = pgEnum(
  'enum_pages_blocks_content_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_content_block_header_badge_type = pgEnum(
  'enum_pages_blocks_content_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_blocks_styled_list_list_style = pgEnum(
  'enum_pages_blocks_styled_list_list_style',
  ['bullet', 'check', 'numbered', 'feature'],
)
export const enum_pages_blocks_testimonials_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_testimonials_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_testimonials_block_header_type = pgEnum(
  'enum_pages_blocks_testimonials_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_testimonials_block_header_badge_type = pgEnum(
  'enum_pages_blocks_testimonials_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_testimonials_type = pgEnum('enum_pages_blocks_testimonials_type', [
  'TestimonialsBlock01',
  'TestimonialsBlock02',
  'testimonialsModularGrid',
])
export const enum_pages_blocks_features_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_features_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_features_columns_size = pgEnum(
  'enum_pages_blocks_features_columns_size',
  ['half', 'full', 'oneThird', 'twoThirds'],
)
export const enum_pages_blocks_features_columns_badge_type = pgEnum(
  'enum_pages_blocks_features_columns_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_features_columns_link_type = pgEnum(
  'enum_pages_blocks_features_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_features_block_header_type = pgEnum(
  'enum_pages_blocks_features_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_features_block_header_badge_type = pgEnum(
  'enum_pages_blocks_features_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_features_layout = pgEnum('enum_pages_blocks_features_layout', [
  '01',
  '02',
  '03',
  '04',
  '05',
  '06',
  '07',
  '08',
  '09',
  '10',
  '11',
  '12',
  '13',
  '14',
  '15',
  '16',
  '17',
])
export const enum_pages_blocks_features_link_type = pgEnum('enum_pages_blocks_features_link_type', [
  'reference',
  'custom',
])
export const enum_pages_blocks_faq_block_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_faq_block_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_faq_block_block_header_type = pgEnum(
  'enum_pages_blocks_faq_block_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_faq_block_block_header_badge_type = pgEnum(
  'enum_pages_blocks_faq_block_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_gallery_block_header_links_link_type = pgEnum(
  'enum_pages_blocks_gallery_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_gallery_block_header_type = pgEnum(
  'enum_pages_blocks_gallery_block_header_type',
  ['center', 'split', 'start'],
)
export const enum_pages_blocks_gallery_block_header_badge_type = pgEnum(
  'enum_pages_blocks_gallery_block_header_badge_type',
  ['label', 'reference'],
)
export const enum_pages_blocks_gallery_type = pgEnum('enum_pages_blocks_gallery_type', [
  'gallery01',
  'gallery02',
  'gallery03',
])
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'hero01',
  'hero02',
  'hero03',
  'hero04',
  'hero05',
  'hero06',
  'hero07',
  'none',
])
export const enum_pages_hero_badge_type = pgEnum('enum_pages_hero_badge_type', [
  'label',
  'reference',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_apps_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_apps_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_apps_body_links_link_type = pgEnum(
  'enum__pages_v_blocks_apps_body_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_apps_block_header_type = pgEnum(
  'enum__pages_v_blocks_apps_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_apps_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_apps_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_apps_type = pgEnum('enum__pages_v_blocks_apps_type', [
  'appsBlock01',
  'appsBlock02',
  'appsBlock03',
  'appsBlock04',
  'appsBlockHero',
])
export const enum__pages_v_blocks_apps_body_badge_type = pgEnum(
  'enum__pages_v_blocks_apps_body_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_cta_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_block_header_type = pgEnum(
  'enum__pages_v_blocks_cta_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_cta_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_cta_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_content_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_content_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_block_header_type = pgEnum(
  'enum__pages_v_blocks_content_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_content_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_content_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_blocks_styled_list_list_style = pgEnum(
  'enum__pages_v_blocks_styled_list_list_style',
  ['bullet', 'check', 'numbered', 'feature'],
)
export const enum__pages_v_blocks_testimonials_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_testimonials_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_testimonials_block_header_type = pgEnum(
  'enum__pages_v_blocks_testimonials_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_testimonials_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_testimonials_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_testimonials_type = pgEnum(
  'enum__pages_v_blocks_testimonials_type',
  ['TestimonialsBlock01', 'TestimonialsBlock02', 'testimonialsModularGrid'],
)
export const enum__pages_v_blocks_features_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_features_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_features_columns_size = pgEnum(
  'enum__pages_v_blocks_features_columns_size',
  ['half', 'full', 'oneThird', 'twoThirds'],
)
export const enum__pages_v_blocks_features_columns_badge_type = pgEnum(
  'enum__pages_v_blocks_features_columns_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_features_columns_link_type = pgEnum(
  'enum__pages_v_blocks_features_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_features_block_header_type = pgEnum(
  'enum__pages_v_blocks_features_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_features_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_features_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_features_layout = pgEnum('enum__pages_v_blocks_features_layout', [
  '01',
  '02',
  '03',
  '04',
  '05',
  '06',
  '07',
  '08',
  '09',
  '10',
  '11',
  '12',
  '13',
  '14',
  '15',
  '16',
  '17',
])
export const enum__pages_v_blocks_features_link_type = pgEnum(
  'enum__pages_v_blocks_features_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_faq_block_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_faq_block_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_faq_block_block_header_type = pgEnum(
  'enum__pages_v_blocks_faq_block_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_faq_block_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_faq_block_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_gallery_block_header_links_link_type = pgEnum(
  'enum__pages_v_blocks_gallery_block_header_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_gallery_block_header_type = pgEnum(
  'enum__pages_v_blocks_gallery_block_header_type',
  ['center', 'split', 'start'],
)
export const enum__pages_v_blocks_gallery_block_header_badge_type = pgEnum(
  'enum__pages_v_blocks_gallery_block_header_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_blocks_gallery_type = pgEnum('enum__pages_v_blocks_gallery_type', [
  'gallery01',
  'gallery02',
  'gallery03',
])
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'hero01',
  'hero02',
  'hero03',
  'hero04',
  'hero05',
  'hero06',
  'hero07',
  'none',
])
export const enum__pages_v_version_hero_badge_type = pgEnum(
  'enum__pages_v_version_hero_badge_type',
  ['label', 'reference'],
)
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum__pages_v_published_locale = pgEnum('enum__pages_v_published_locale', ['en', 'ar'])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum__posts_v_published_locale = pgEnum('enum__posts_v_published_locale', ['en', 'ar'])
export const enum_apps_hero_links_link_type = pgEnum('enum_apps_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_apps_link_type = pgEnum('enum_apps_link_type', ['reference', 'custom'])
export const enum_apps_hero_type = pgEnum('enum_apps_hero_type', [
  'hero01',
  'hero02',
  'hero03',
  'hero04',
  'hero05',
  'hero06',
  'hero07',
  'none',
])
export const enum_apps_hero_badge_type = pgEnum('enum_apps_hero_badge_type', ['label', 'reference'])
export const enum_apps_status = pgEnum('enum_apps_status', ['draft', 'published'])
export const enum__apps_v_version_hero_links_link_type = pgEnum(
  'enum__apps_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__apps_v_version_link_type = pgEnum('enum__apps_v_version_link_type', [
  'reference',
  'custom',
])
export const enum__apps_v_version_hero_type = pgEnum('enum__apps_v_version_hero_type', [
  'hero01',
  'hero02',
  'hero03',
  'hero04',
  'hero05',
  'hero06',
  'hero07',
  'none',
])
export const enum__apps_v_version_hero_badge_type = pgEnum('enum__apps_v_version_hero_badge_type', [
  'label',
  'reference',
])
export const enum__apps_v_version_status = pgEnum('enum__apps_v_version_status', [
  'draft',
  'published',
])
export const enum__apps_v_published_locale = pgEnum('enum__apps_v_published_locale', ['en', 'ar'])
export const enum_solutions_link_type = pgEnum('enum_solutions_link_type', ['reference', 'custom'])
export const enum_solutions_ecosystem = pgEnum('enum_solutions_ecosystem', [
  'sell',
  'operate',
  'manage',
])
export const enum_solutions_status = pgEnum('enum_solutions_status', ['draft', 'published'])
export const enum__solutions_v_version_link_type = pgEnum('enum__solutions_v_version_link_type', [
  'reference',
  'custom',
])
export const enum__solutions_v_version_ecosystem = pgEnum('enum__solutions_v_version_ecosystem', [
  'sell',
  'operate',
  'manage',
])
export const enum__solutions_v_version_status = pgEnum('enum__solutions_v_version_status', [
  'draft',
  'published',
])
export const enum__solutions_v_published_locale = pgEnum('enum__solutions_v_published_locale', [
  'en',
  'ar',
])
export const enum_app_icons_category = pgEnum('enum_app_icons_category', ['App', 'Website'])
export const enum_testimonials_status = pgEnum('enum_testimonials_status', ['draft', 'published'])
export const enum__testimonials_v_version_status = pgEnum('enum__testimonials_v_version_status', [
  'draft',
  'published',
])
export const enum__testimonials_v_published_locale = pgEnum(
  'enum__testimonials_v_published_locale',
  ['en', 'ar'],
)
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_tabs_description_links_link_type = pgEnum(
  'enum_header_tabs_description_links_link_type',
  ['reference', 'custom'],
)
export const enum_header_tabs_nav_items_featured_link_links_link_type = pgEnum(
  'enum_header_tabs_nav_items_featured_link_links_link_type',
  ['reference', 'custom'],
)
export const enum_header_tabs_nav_items_list_links_links_link_type = pgEnum(
  'enum_header_tabs_nav_items_list_links_links_link_type',
  ['reference', 'custom'],
)
export const enum_header_tabs_nav_items_style = pgEnum('enum_header_tabs_nav_items_style', [
  'default',
  'featured',
  'list',
])
export const enum_header_tabs_nav_items_default_link_link_type = pgEnum(
  'enum_header_tabs_nav_items_default_link_link_type',
  ['reference', 'custom'],
)
export const enum_header_tabs_link_type = pgEnum('enum_header_tabs_link_type', [
  'reference',
  'custom',
])
export const enum_header_cta_link_type = pgEnum('enum_header_cta_link_type', [
  'reference',
  'custom',
])
export const enum_footer_columns_nav_items_link_type = pgEnum(
  'enum_footer_columns_nav_items_link_type',
  ['reference', 'custom'],
)

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_hero_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_hero_logos = pgTable(
  'pages_hero_logos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_logos_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_logos_parent_id_idx').on(columns._parentID),
    pages_hero_logos_logo_idx: index('pages_hero_logos_logo_idx').on(columns.logo),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_logos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_apps_block_header_links = pgTable(
  'pages_blocks_apps_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_apps_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_apps_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_apps_block_header_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_apps_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_apps.id],
      name: 'pages_blocks_apps_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_apps_body_links = pgTable(
  'pages_blocks_apps_body_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_apps_body_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_apps_body_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_apps_body_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_apps_body_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_apps.id],
      name: 'pages_blocks_apps_body_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_apps = pgTable(
  'pages_blocks_apps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_apps_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_apps_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum_pages_blocks_apps_type('type').default('appsBlock01'),
    body_badge_type: enum_pages_blocks_apps_body_badge_type('body_badge_type'),
    body_badge_label: varchar('body_badge_label'),
    body_badge_color: badge_color('body_badge_color').default('blue'),
    body_badge_icon: varchar('body_badge_icon'),
    body_badge_icon_position: badge_icon_position('body_badge_icon_position').default('flex-row'),
    body_headerText: jsonb('body_header_text'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_apps_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_apps_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_apps_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_apps_locale_idx').on(columns._locale),
    pages_blocks_apps_media_idx: index('pages_blocks_apps_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_apps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_block_header_links = pgTable(
  'pages_blocks_cta_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_block_header_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_cta_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_cta_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_cta_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_cta_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_block_header_links = pgTable(
  'pages_blocks_content_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_content_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_content_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_content_columns_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_content_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_content_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_content_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_media_block_locale_idx').on(columns._locale),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_archive_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_form_block_locale_idx').on(columns._locale),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_styled_list_items = pgTable(
  'pages_blocks_styled_list_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    text: varchar('text'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_styled_list_items_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_styled_list_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_styled_list_items_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_styled_list.id],
      name: 'pages_blocks_styled_list_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_styled_list = pgTable(
  'pages_blocks_styled_list',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    listStyle: enum_pages_blocks_styled_list_list_style('list_style').default('bullet'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_styled_list_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_styled_list_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_styled_list_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_styled_list_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_styled_list_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_testimonials_block_header_links = pgTable(
  'pages_blocks_testimonials_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_testimonials_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonials_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_testimonials_block_header_links_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_testimonials.id],
      name: 'pages_blocks_testimonials_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_testimonials = pgTable(
  'pages_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_testimonials_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_testimonials_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum_pages_blocks_testimonials_type('type').default('TestimonialsBlock01'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_testimonials_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_testimonials_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_features_block_header_links = pgTable(
  'pages_blocks_features_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_features_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_features_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_features_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_features_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_features.id],
      name: 'pages_blocks_features_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_features_columns = pgTable(
  'pages_blocks_features_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_features_columns_size('size').default('half'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    tabLabel: varchar('tab_label'),
    icon: varchar('icon'),
    content_title: varchar('content_title'),
    content_subtitle: varchar('content_subtitle'),
    richTextContent: jsonb('rich_text_content'),
    enableBadge: boolean('enable_badge'),
    enableCta: boolean('enable_cta'),
    reverseOrder: boolean('reverse_order'),
    badge_type: enum_pages_blocks_features_columns_badge_type('badge_type'),
    badge_label: varchar('badge_label'),
    badge_color: badge_color('badge_color').default('blue'),
    badge_icon: varchar('badge_icon'),
    badge_icon_position: badge_icon_position('badge_icon_position').default('flex-row'),
    link_type: enum_pages_blocks_features_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_features_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_features_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_features_columns_locale_idx').on(columns._locale),
    pages_blocks_features_columns_image_idx: index('pages_blocks_features_columns_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_features.id],
      name: 'pages_blocks_features_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_features = pgTable(
  'pages_blocks_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_features_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_features_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    layout: enum_pages_blocks_features_layout('layout').default('01'),
    blockImage: integer('block_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    CTALabel: varchar('c_t_a_label'),
    link_type: enum_pages_blocks_features_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_features_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_features_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_features_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_features_locale_idx').on(columns._locale),
    pages_blocks_features_block_image_idx: index('pages_blocks_features_block_image_idx').on(
      columns.blockImage,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_faq_block_block_header_links = pgTable(
  'pages_blocks_faq_block_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_faq_block_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_faq_block_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_block_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_faq_block_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_faq_block.id],
      name: 'pages_blocks_faq_block_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_faq_block = pgTable(
  'pages_blocks_faq_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_faq_block_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_faq_block_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_faq_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_faq_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_faq_block_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_faq_block_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_faq_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_gallery_block_header_links = pgTable(
  'pages_blocks_gallery_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_pages_blocks_gallery_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_gallery_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('pages_blocks_gallery_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_gallery.id],
      name: 'pages_blocks_gallery_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_gallery_images = pgTable(
  'pages_blocks_gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    panel_title: varchar('panel_title'),
    panel_description: varchar('panel_description'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery_images_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_blocks_gallery_images_locale_idx').on(columns._locale),
    pages_blocks_gallery_images_image_idx: index('pages_blocks_gallery_images_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_gallery.id],
      name: 'pages_blocks_gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_gallery = pgTable(
  'pages_blocks_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    blockHeader_type:
      enum_pages_blocks_gallery_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum_pages_blocks_gallery_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum_pages_blocks_gallery_type('type').default('gallery01'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_gallery_path_idx').on(columns._path),
    _localeIdx: index('pages_blocks_gallery_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_breadcrumbs = pgTable(
  'pages_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('pages_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('pages_breadcrumbs_parent_id_idx').on(columns._parentID),
    _localeIdx: index('pages_breadcrumbs_locale_idx').on(columns._locale),
    pages_breadcrumbs_doc_idx: index('pages_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    hero_type: enum_pages_hero_type('hero_type').default('hero01'),
    hero_supportingText: varchar('hero_supporting_text'),
    hero_badge_type: enum_pages_hero_badge_type('hero_badge_type'),
    hero_badge_color: badge_color('hero_badge_color').default('blue'),
    hero_badge_icon: varchar('hero_badge_icon'),
    hero_badge_icon_position: badge_icon_position('hero_badge_icon_position').default('flex-row'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => pages.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_parent_idx: index('pages_parent_idx').on(columns.parent),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_locales = pgTable(
  'pages_locales',
  {
    title: varchar('title'),
    hero_richText: jsonb('hero_rich_text'),
    hero_logosHeadline: varchar('hero_logos_headline'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_badge_label: varchar('hero_badge_label'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(
      columns.hero_media,
      columns._locale,
    ),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    _localeParent: uniqueIndex('pages_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
    appsID: integer('apps_id'),
    categoriesID: integer('categories_id'),
    testimonialsID: integer('testimonials_id'),
    faqID: integer('faq_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    localeIdx: index('pages_rels_locale_idx').on(columns.locale),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID, columns.locale),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID, columns.locale),
    pages_rels_solutions_id_idx: index('pages_rels_solutions_id_idx').on(
      columns.solutionsID,
      columns.locale,
    ),
    pages_rels_apps_id_idx: index('pages_rels_apps_id_idx').on(columns.appsID, columns.locale),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(
      columns.categoriesID,
      columns.locale,
    ),
    pages_rels_testimonials_id_idx: index('pages_rels_testimonials_id_idx').on(
      columns.testimonialsID,
      columns.locale,
    ),
    pages_rels_faq_id_idx: index('pages_rels_faq_id_idx').on(columns.faqID, columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'pages_rels_solutions_fk',
    }).onDelete('cascade'),
    appsIdFk: foreignKey({
      columns: [columns['appsID']],
      foreignColumns: [apps.id],
      name: 'pages_rels_apps_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'pages_rels_testimonials_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'pages_rels_faq_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_version_hero_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_logos = pgTable(
  '_pages_v_version_hero_logos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_logos_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_logos_parent_id_idx').on(columns._parentID),
    _pages_v_version_hero_logos_logo_idx: index('_pages_v_version_hero_logos_logo_idx').on(
      columns.logo,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_logos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_apps_block_header_links = pgTable(
  '_pages_v_blocks_apps_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_apps_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_apps_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_apps_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_apps_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_apps.id],
      name: '_pages_v_blocks_apps_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_apps_body_links = pgTable(
  '_pages_v_blocks_apps_body_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_apps_body_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_apps_body_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_apps_body_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_apps_body_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_apps.id],
      name: '_pages_v_blocks_apps_body_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_apps = pgTable(
  '_pages_v_blocks_apps',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_apps_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_apps_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum__pages_v_blocks_apps_type('type').default('appsBlock01'),
    body_badge_type: enum__pages_v_blocks_apps_body_badge_type('body_badge_type'),
    body_badge_label: varchar('body_badge_label'),
    body_badge_color: badge_color('body_badge_color').default('blue'),
    body_badge_icon: varchar('body_badge_icon'),
    body_badge_icon_position: badge_icon_position('body_badge_icon_position').default('flex-row'),
    body_headerText: jsonb('body_header_text'),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_apps_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_apps_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_apps_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_apps_locale_idx').on(columns._locale),
    _pages_v_blocks_apps_media_idx: index('_pages_v_blocks_apps_media_idx').on(columns.media),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_apps_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_block_header_links = pgTable(
  '_pages_v_blocks_cta_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_cta_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_cta_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_cta_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_cta_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_cta_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_cta_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_block_header_links = pgTable(
  '_pages_v_blocks_content_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_content_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_content_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_content_columns_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_content_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_content_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_content_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_media_block_locale_idx').on(columns._locale),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_archive_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_form_block_locale_idx').on(columns._locale),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_styled_list_items = pgTable(
  '_pages_v_blocks_styled_list_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    text: varchar('text'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_styled_list_items_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_styled_list_items_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_styled_list_items_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_styled_list.id],
      name: '_pages_v_blocks_styled_list_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_styled_list = pgTable(
  '_pages_v_blocks_styled_list',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    listStyle: enum__pages_v_blocks_styled_list_list_style('list_style').default('bullet'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_styled_list_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_styled_list_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_styled_list_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_styled_list_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_styled_list_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_testimonials_block_header_links = pgTable(
  '_pages_v_blocks_testimonials_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_testimonials_block_header_links_link_type('link_type').default(
        'reference',
      ),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonials_block_header_links_order_idx').on(
      columns._order,
    ),
    _parentIDIdx: index('_pages_v_blocks_testimonials_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_testimonials_block_header_links_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_testimonials.id],
      name: '_pages_v_blocks_testimonials_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_testimonials = pgTable(
  '_pages_v_blocks_testimonials',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_testimonials_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_testimonials_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum__pages_v_blocks_testimonials_type('type').default('TestimonialsBlock01'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_testimonials_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_testimonials_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_testimonials_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_testimonials_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_testimonials_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_features_block_header_links = pgTable(
  '_pages_v_blocks_features_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_features_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_features_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_features_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_features_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_features.id],
      name: '_pages_v_blocks_features_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_features_columns = pgTable(
  '_pages_v_blocks_features_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_features_columns_size('size').default('half'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    tabLabel: varchar('tab_label'),
    icon: varchar('icon'),
    content_title: varchar('content_title'),
    content_subtitle: varchar('content_subtitle'),
    richTextContent: jsonb('rich_text_content'),
    enableBadge: boolean('enable_badge'),
    enableCta: boolean('enable_cta'),
    reverseOrder: boolean('reverse_order'),
    badge_type: enum__pages_v_blocks_features_columns_badge_type('badge_type'),
    badge_label: varchar('badge_label'),
    badge_color: badge_color('badge_color').default('blue'),
    badge_icon: varchar('badge_icon'),
    badge_icon_position: badge_icon_position('badge_icon_position').default('flex-row'),
    link_type: enum__pages_v_blocks_features_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_features_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_features_columns_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_features_columns_locale_idx').on(columns._locale),
    _pages_v_blocks_features_columns_image_idx: index(
      '_pages_v_blocks_features_columns_image_idx',
    ).on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_features.id],
      name: '_pages_v_blocks_features_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_features = pgTable(
  '_pages_v_blocks_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_features_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_features_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    layout: enum__pages_v_blocks_features_layout('layout').default('01'),
    blockImage: integer('block_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    CTALabel: varchar('c_t_a_label'),
    link_type: enum__pages_v_blocks_features_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_features_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_features_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_features_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_features_locale_idx').on(columns._locale),
    _pages_v_blocks_features_block_image_idx: index('_pages_v_blocks_features_block_image_idx').on(
      columns.blockImage,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_faq_block_block_header_links = pgTable(
  '_pages_v_blocks_faq_block_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_faq_block_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_faq_block_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_block_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_faq_block_block_header_links_locale_idx').on(
      columns._locale,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_faq_block.id],
      name: '_pages_v_blocks_faq_block_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_faq_block = pgTable(
  '_pages_v_blocks_faq_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_faq_block_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_faq_block_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_faq_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_faq_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_faq_block_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_faq_block_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_faq_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_gallery_block_header_links = pgTable(
  '_pages_v_blocks_gallery_block_header_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type:
      enum__pages_v_blocks_gallery_block_header_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_gallery_block_header_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_gallery_block_header_links_parent_id_idx').on(
      columns._parentID,
    ),
    _localeIdx: index('_pages_v_blocks_gallery_block_header_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_gallery.id],
      name: '_pages_v_blocks_gallery_block_header_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_gallery_images = pgTable(
  '_pages_v_blocks_gallery_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    panel_title: varchar('panel_title'),
    panel_description: varchar('panel_description'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_gallery_images_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_gallery_images_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_blocks_gallery_images_locale_idx').on(columns._locale),
    _pages_v_blocks_gallery_images_image_idx: index('_pages_v_blocks_gallery_images_image_idx').on(
      columns.image,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_gallery.id],
      name: '_pages_v_blocks_gallery_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_gallery = pgTable(
  '_pages_v_blocks_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    blockHeader_type:
      enum__pages_v_blocks_gallery_block_header_type('block_header_type').default('center'),
    blockHeader_badge_type:
      enum__pages_v_blocks_gallery_block_header_badge_type('block_header_badge_type'),
    blockHeader_badge_label: varchar('block_header_badge_label'),
    blockHeader_badge_color: badge_color('block_header_badge_color').default('blue'),
    blockHeader_badge_icon: varchar('block_header_badge_icon'),
    blockHeader_badge_icon_position: badge_icon_position(
      'block_header_badge_icon_position',
    ).default('flex-row'),
    blockHeader_headerText: jsonb('block_header_header_text'),
    type: enum__pages_v_blocks_gallery_type('type').default('gallery01'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_gallery_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_gallery_path_idx').on(columns._path),
    _localeIdx: index('_pages_v_blocks_gallery_locale_idx').on(columns._locale),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_breadcrumbs = pgTable(
  '_pages_v_version_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    doc: integer('doc_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_breadcrumbs_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_pages_v_version_breadcrumbs_locale_idx').on(columns._locale),
    _pages_v_version_breadcrumbs_doc_idx: index('_pages_v_version_breadcrumbs_doc_idx').on(
      columns.doc,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('hero01'),
    version_hero_supportingText: varchar('version_hero_supporting_text'),
    version_hero_badge_type: enum__pages_v_version_hero_badge_type('version_hero_badge_type'),
    version_hero_badge_color: badge_color('version_hero_badge_color').default('blue'),
    version_hero_badge_icon: varchar('version_hero_badge_icon'),
    version_hero_badge_icon_position: badge_icon_position(
      'version_hero_badge_icon_position',
    ).default('flex-row'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_parent: integer('version_parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__pages_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_parent_idx: index('_pages_v_version_version_parent_idx').on(
      columns.version_parent,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_snapshot_idx: index('_pages_v_snapshot_idx').on(columns.snapshot),
    _pages_v_published_locale_idx: index('_pages_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_locales = pgTable(
  '_pages_v_locales',
  {
    version_title: varchar('version_title'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_logosHeadline: varchar('version_hero_logos_headline'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_hero_badge_label: varchar('version_hero_badge_label'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media, columns._locale),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _localeParent: uniqueIndex('_pages_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
    appsID: integer('apps_id'),
    categoriesID: integer('categories_id'),
    testimonialsID: integer('testimonials_id'),
    faqID: integer('faq_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    localeIdx: index('_pages_v_rels_locale_idx').on(columns.locale),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(
      columns.pagesID,
      columns.locale,
    ),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(
      columns.postsID,
      columns.locale,
    ),
    _pages_v_rels_solutions_id_idx: index('_pages_v_rels_solutions_id_idx').on(
      columns.solutionsID,
      columns.locale,
    ),
    _pages_v_rels_apps_id_idx: index('_pages_v_rels_apps_id_idx').on(
      columns.appsID,
      columns.locale,
    ),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
      columns.locale,
    ),
    _pages_v_rels_testimonials_id_idx: index('_pages_v_rels_testimonials_id_idx').on(
      columns.testimonialsID,
      columns.locale,
    ),
    _pages_v_rels_faq_id_idx: index('_pages_v_rels_faq_id_idx').on(columns.faqID, columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: '_pages_v_rels_solutions_fk',
    }).onDelete('cascade'),
    appsIdFk: foreignKey({
      columns: [columns['appsID']],
      foreignColumns: [apps.id],
      name: '_pages_v_rels_apps_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: '_pages_v_rels_testimonials_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: '_pages_v_rels_faq_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_locales = pgTable(
  'posts_locales',
  {
    title: varchar('title'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage, columns._locale),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    _localeParent: uniqueIndex('posts_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    localeIdx: index('posts_rels_locale_idx').on(columns.locale),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID, columns.locale),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(
      columns.categoriesID,
      columns.locale,
    ),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID, columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__posts_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_snapshot_idx: index('_posts_v_snapshot_idx').on(columns.snapshot),
    _posts_v_published_locale_idx: index('_posts_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_locales = pgTable(
  '_posts_v_locales',
  {
    version_title: varchar('version_title'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
      columns.version_heroImage,
      columns._locale,
    ),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _localeParent: uniqueIndex('_posts_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    localeIdx: index('_posts_v_rels_locale_idx').on(columns.locale),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(
      columns.postsID,
      columns.locale,
    ),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
      columns.locale,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(
      columns.usersID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const apps_hero_links = pgTable(
  'apps_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_apps_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('apps_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('apps_hero_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('apps_hero_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [apps.id],
      name: 'apps_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const apps_hero_logos = pgTable(
  'apps_hero_logos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('apps_hero_logos_order_idx').on(columns._order),
    _parentIDIdx: index('apps_hero_logos_parent_id_idx').on(columns._parentID),
    apps_hero_logos_logo_idx: index('apps_hero_logos_logo_idx').on(columns.logo),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [apps.id],
      name: 'apps_hero_logos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const apps_features = pgTable(
  'apps_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    icon: varchar('icon'),
  },
  (columns) => ({
    _orderIdx: index('apps_features_order_idx').on(columns._order),
    _parentIDIdx: index('apps_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [apps.id],
      name: 'apps_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const apps_features_locales = pgTable(
  'apps_features_locales',
  {
    title: varchar('title'),
    description: varchar('description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('apps_features_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [apps_features.id],
      name: 'apps_features_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const apps = pgTable(
  'apps',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum_apps_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    hero_type: enum_apps_hero_type('hero_type').default('hero01'),
    hero_supportingText: varchar('hero_supporting_text'),
    hero_badge_type: enum_apps_hero_badge_type('hero_badge_type'),
    hero_badge_color: badge_color('hero_badge_color').default('blue'),
    hero_badge_icon: varchar('hero_badge_icon'),
    hero_badge_icon_position: badge_icon_position('hero_badge_icon_position').default('flex-row'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_apps_status('_status').default('draft'),
  },
  (columns) => ({
    apps_icon_idx: index('apps_icon_idx').on(columns.icon),
    apps_slug_idx: index('apps_slug_idx').on(columns.slug),
    apps_updated_at_idx: index('apps_updated_at_idx').on(columns.updatedAt),
    apps_created_at_idx: index('apps_created_at_idx').on(columns.createdAt),
    apps__status_idx: index('apps__status_idx').on(columns._status),
  }),
)

export const apps_locales = pgTable(
  'apps_locales',
  {
    name: varchar('name'),
    tagline: varchar('tagline'),
    overview: jsonb('overview'),
    link_label: varchar('link_label'),
    hero_richText: jsonb('hero_rich_text'),
    hero_logosHeadline: varchar('hero_logos_headline'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    hero_badge_label: varchar('hero_badge_label'),
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    apps_hero_hero_media_idx: index('apps_hero_hero_media_idx').on(
      columns.hero_media,
      columns._locale,
    ),
    _localeParent: uniqueIndex('apps_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [apps.id],
      name: 'apps_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const apps_rels = pgTable(
  'apps_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
    appsID: integer('apps_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('apps_rels_order_idx').on(columns.order),
    parentIdx: index('apps_rels_parent_idx').on(columns.parent),
    pathIdx: index('apps_rels_path_idx').on(columns.path),
    localeIdx: index('apps_rels_locale_idx').on(columns.locale),
    apps_rels_pages_id_idx: index('apps_rels_pages_id_idx').on(columns.pagesID, columns.locale),
    apps_rels_posts_id_idx: index('apps_rels_posts_id_idx').on(columns.postsID, columns.locale),
    apps_rels_solutions_id_idx: index('apps_rels_solutions_id_idx').on(
      columns.solutionsID,
      columns.locale,
    ),
    apps_rels_apps_id_idx: index('apps_rels_apps_id_idx').on(columns.appsID, columns.locale),
    apps_rels_media_id_idx: index('apps_rels_media_id_idx').on(columns.mediaID, columns.locale),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [apps.id],
      name: 'apps_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'apps_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'apps_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'apps_rels_solutions_fk',
    }).onDelete('cascade'),
    appsIdFk: foreignKey({
      columns: [columns['appsID']],
      foreignColumns: [apps.id],
      name: 'apps_rels_apps_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'apps_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v_version_hero_links = pgTable(
  '_apps_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__apps_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_apps_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_apps_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _localeIdx: index('_apps_v_version_hero_links_locale_idx').on(columns._locale),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_apps_v.id],
      name: '_apps_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v_version_hero_logos = pgTable(
  '_apps_v_version_hero_logos',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    logo: integer('logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_apps_v_version_hero_logos_order_idx').on(columns._order),
    _parentIDIdx: index('_apps_v_version_hero_logos_parent_id_idx').on(columns._parentID),
    _apps_v_version_hero_logos_logo_idx: index('_apps_v_version_hero_logos_logo_idx').on(
      columns.logo,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_apps_v.id],
      name: '_apps_v_version_hero_logos_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v_version_features = pgTable(
  '_apps_v_version_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    icon: varchar('icon'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_apps_v_version_features_order_idx').on(columns._order),
    _parentIDIdx: index('_apps_v_version_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_apps_v.id],
      name: '_apps_v_version_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v_version_features_locales = pgTable(
  '_apps_v_version_features_locales',
  {
    title: varchar('title'),
    description: varchar('description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_apps_v_version_features_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_apps_v_version_features.id],
      name: '_apps_v_version_features_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v = pgTable(
  '_apps_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => apps.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_icon: integer('version_icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_link_type: enum__apps_v_version_link_type('version_link_type').default('reference'),
    version_link_newTab: boolean('version_link_new_tab'),
    version_link_url: varchar('version_link_url'),
    version_hero_type: enum__apps_v_version_hero_type('version_hero_type').default('hero01'),
    version_hero_supportingText: varchar('version_hero_supporting_text'),
    version_hero_badge_type: enum__apps_v_version_hero_badge_type('version_hero_badge_type'),
    version_hero_badge_color: badge_color('version_hero_badge_color').default('blue'),
    version_hero_badge_icon: varchar('version_hero_badge_icon'),
    version_hero_badge_icon_position: badge_icon_position(
      'version_hero_badge_icon_position',
    ).default('flex-row'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__apps_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__apps_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _apps_v_parent_idx: index('_apps_v_parent_idx').on(columns.parent),
    _apps_v_version_version_icon_idx: index('_apps_v_version_version_icon_idx').on(
      columns.version_icon,
    ),
    _apps_v_version_version_slug_idx: index('_apps_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _apps_v_version_version_updated_at_idx: index('_apps_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _apps_v_version_version_created_at_idx: index('_apps_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _apps_v_version_version__status_idx: index('_apps_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _apps_v_created_at_idx: index('_apps_v_created_at_idx').on(columns.createdAt),
    _apps_v_updated_at_idx: index('_apps_v_updated_at_idx').on(columns.updatedAt),
    _apps_v_snapshot_idx: index('_apps_v_snapshot_idx').on(columns.snapshot),
    _apps_v_published_locale_idx: index('_apps_v_published_locale_idx').on(columns.publishedLocale),
    _apps_v_latest_idx: index('_apps_v_latest_idx').on(columns.latest),
    _apps_v_autosave_idx: index('_apps_v_autosave_idx').on(columns.autosave),
  }),
)

export const _apps_v_locales = pgTable(
  '_apps_v_locales',
  {
    version_name: varchar('version_name'),
    version_tagline: varchar('version_tagline'),
    version_overview: jsonb('version_overview'),
    version_link_label: varchar('version_link_label'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_logosHeadline: varchar('version_hero_logos_headline'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_hero_badge_label: varchar('version_hero_badge_label'),
    version_content: jsonb('version_content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _apps_v_version_hero_version_hero_media_idx: index(
      '_apps_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media, columns._locale),
    _localeParent: uniqueIndex('_apps_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_apps_v.id],
      name: '_apps_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _apps_v_rels = pgTable(
  '_apps_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    locale: enum__locales('locale'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
    appsID: integer('apps_id'),
    mediaID: integer('media_id'),
  },
  (columns) => ({
    order: index('_apps_v_rels_order_idx').on(columns.order),
    parentIdx: index('_apps_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_apps_v_rels_path_idx').on(columns.path),
    localeIdx: index('_apps_v_rels_locale_idx').on(columns.locale),
    _apps_v_rels_pages_id_idx: index('_apps_v_rels_pages_id_idx').on(
      columns.pagesID,
      columns.locale,
    ),
    _apps_v_rels_posts_id_idx: index('_apps_v_rels_posts_id_idx').on(
      columns.postsID,
      columns.locale,
    ),
    _apps_v_rels_solutions_id_idx: index('_apps_v_rels_solutions_id_idx').on(
      columns.solutionsID,
      columns.locale,
    ),
    _apps_v_rels_apps_id_idx: index('_apps_v_rels_apps_id_idx').on(columns.appsID, columns.locale),
    _apps_v_rels_media_id_idx: index('_apps_v_rels_media_id_idx').on(
      columns.mediaID,
      columns.locale,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_apps_v.id],
      name: '_apps_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_apps_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_apps_v_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: '_apps_v_rels_solutions_fk',
    }).onDelete('cascade'),
    appsIdFk: foreignKey({
      columns: [columns['appsID']],
      foreignColumns: [apps.id],
      name: '_apps_v_rels_apps_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_apps_v_rels_media_fk',
    }).onDelete('cascade'),
  }),
)

export const solutions = pgTable(
  'solutions',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    icon: integer('icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    link_type: enum_solutions_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    ecosystem: enum_solutions_ecosystem('ecosystem'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_solutions_status('_status').default('draft'),
  },
  (columns) => ({
    solutions_icon_idx: index('solutions_icon_idx').on(columns.icon),
    solutions_slug_idx: index('solutions_slug_idx').on(columns.slug),
    solutions_updated_at_idx: index('solutions_updated_at_idx').on(columns.updatedAt),
    solutions_created_at_idx: index('solutions_created_at_idx').on(columns.createdAt),
    solutions__status_idx: index('solutions__status_idx').on(columns._status),
  }),
)

export const solutions_locales = pgTable(
  'solutions_locales',
  {
    name: varchar('name'),
    tagline: varchar('tagline'),
    link_label: varchar('link_label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('solutions_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [solutions.id],
      name: 'solutions_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const solutions_rels = pgTable(
  'solutions_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
  },
  (columns) => ({
    order: index('solutions_rels_order_idx').on(columns.order),
    parentIdx: index('solutions_rels_parent_idx').on(columns.parent),
    pathIdx: index('solutions_rels_path_idx').on(columns.path),
    solutions_rels_pages_id_idx: index('solutions_rels_pages_id_idx').on(columns.pagesID),
    solutions_rels_posts_id_idx: index('solutions_rels_posts_id_idx').on(columns.postsID),
    solutions_rels_solutions_id_idx: index('solutions_rels_solutions_id_idx').on(
      columns.solutionsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [solutions.id],
      name: 'solutions_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'solutions_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'solutions_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'solutions_rels_solutions_fk',
    }).onDelete('cascade'),
  }),
)

export const _solutions_v = pgTable(
  '_solutions_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => solutions.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_icon: integer('version_icon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_link_type:
      enum__solutions_v_version_link_type('version_link_type').default('reference'),
    version_link_newTab: boolean('version_link_new_tab'),
    version_link_url: varchar('version_link_url'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_ecosystem: enum__solutions_v_version_ecosystem('version_ecosystem'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__solutions_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__solutions_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _solutions_v_parent_idx: index('_solutions_v_parent_idx').on(columns.parent),
    _solutions_v_version_version_icon_idx: index('_solutions_v_version_version_icon_idx').on(
      columns.version_icon,
    ),
    _solutions_v_version_version_slug_idx: index('_solutions_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _solutions_v_version_version_updated_at_idx: index(
      '_solutions_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _solutions_v_version_version_created_at_idx: index(
      '_solutions_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _solutions_v_version_version__status_idx: index('_solutions_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _solutions_v_created_at_idx: index('_solutions_v_created_at_idx').on(columns.createdAt),
    _solutions_v_updated_at_idx: index('_solutions_v_updated_at_idx').on(columns.updatedAt),
    _solutions_v_snapshot_idx: index('_solutions_v_snapshot_idx').on(columns.snapshot),
    _solutions_v_published_locale_idx: index('_solutions_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _solutions_v_latest_idx: index('_solutions_v_latest_idx').on(columns.latest),
    _solutions_v_autosave_idx: index('_solutions_v_autosave_idx').on(columns.autosave),
  }),
)

export const _solutions_v_locales = pgTable(
  '_solutions_v_locales',
  {
    version_name: varchar('version_name'),
    version_tagline: varchar('version_tagline'),
    version_link_label: varchar('version_link_label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_solutions_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_solutions_v.id],
      name: '_solutions_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _solutions_v_rels = pgTable(
  '_solutions_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
  },
  (columns) => ({
    order: index('_solutions_v_rels_order_idx').on(columns.order),
    parentIdx: index('_solutions_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_solutions_v_rels_path_idx').on(columns.path),
    _solutions_v_rels_pages_id_idx: index('_solutions_v_rels_pages_id_idx').on(columns.pagesID),
    _solutions_v_rels_posts_id_idx: index('_solutions_v_rels_posts_id_idx').on(columns.postsID),
    _solutions_v_rels_solutions_id_idx: index('_solutions_v_rels_solutions_id_idx').on(
      columns.solutionsID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_solutions_v.id],
      name: '_solutions_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_solutions_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_solutions_v_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: '_solutions_v_rels_solutions_fk',
    }).onDelete('cascade'),
  }),
)

export const app_icons = pgTable(
  'app_icons',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    caption: jsonb('caption'),
    Category: enum_app_icons_category('category'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
  },
  (columns) => ({
    app_icons_updated_at_idx: index('app_icons_updated_at_idx').on(columns.updatedAt),
    app_icons_created_at_idx: index('app_icons_created_at_idx').on(columns.createdAt),
    app_icons_filename_idx: uniqueIndex('app_icons_filename_idx').on(columns.filename),
    app_icons_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'app_icons_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    app_icons_sizes_square_sizes_square_filename_idx: index(
      'app_icons_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    caption: jsonb('caption'),
    category: integer('category_id').references(() => media_categories.id, {
      onDelete: 'set null',
    }),
    prefix: varchar('prefix').default('media'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_category_idx: index('media_category_idx').on(columns.category),
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    _localeIdx: index('categories_breadcrumbs_locale_idx').on(columns._locale),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const categories_locales = pgTable(
  'categories_locales',
  {
    title: varchar('title').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('categories_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const media_categories = pgTable(
  'media_categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    media_categories_slug_idx: index('media_categories_slug_idx').on(columns.slug),
    media_categories_updated_at_idx: index('media_categories_updated_at_idx').on(columns.updatedAt),
    media_categories_created_at_idx: index('media_categories_created_at_idx').on(columns.createdAt),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const testimonials_stats = pgTable(
  'testimonials_stats',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: numeric('value'),
    isPercentage: boolean('is_percentage').default(false),
    isIncrease: boolean('is_increase').default(true),
  },
  (columns) => ({
    _orderIdx: index('testimonials_stats_order_idx').on(columns._order),
    _parentIDIdx: index('testimonials_stats_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [testimonials.id],
      name: 'testimonials_stats_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials_stats_locales = pgTable(
  'testimonials_stats_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('testimonials_stats_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [testimonials_stats.id],
      name: 'testimonials_stats_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials = pgTable(
  'testimonials',
  {
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    companyLogo: integer('company_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    authorInfo_avatar: integer('author_info_avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    rating: numeric('rating'),
    group_featured: boolean('group_featured').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_testimonials_status('_status').default('draft'),
  },
  (columns) => ({
    testimonials_media_idx: index('testimonials_media_idx').on(columns.media),
    testimonials_company_logo_idx: index('testimonials_company_logo_idx').on(columns.companyLogo),
    testimonials_author_info_author_info_avatar_idx: index(
      'testimonials_author_info_author_info_avatar_idx',
    ).on(columns.authorInfo_avatar),
    testimonials_updated_at_idx: index('testimonials_updated_at_idx').on(columns.updatedAt),
    testimonials_created_at_idx: index('testimonials_created_at_idx').on(columns.createdAt),
    testimonials__status_idx: index('testimonials__status_idx').on(columns._status),
  }),
)

export const testimonials_locales = pgTable(
  'testimonials_locales',
  {
    company: varchar('company'),
    authorInfo_name: varchar('author_info_name'),
    authorInfo_title: varchar('author_info_title'),
    quote: jsonb('quote'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('testimonials_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [testimonials.id],
      name: 'testimonials_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const testimonials_rels = pgTable(
  'testimonials_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('testimonials_rels_order_idx').on(columns.order),
    parentIdx: index('testimonials_rels_parent_idx').on(columns.parent),
    pathIdx: index('testimonials_rels_path_idx').on(columns.path),
    testimonials_rels_categories_id_idx: index('testimonials_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [testimonials.id],
      name: 'testimonials_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'testimonials_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _testimonials_v_version_stats = pgTable(
  '_testimonials_v_version_stats',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    value: numeric('value'),
    isPercentage: boolean('is_percentage').default(false),
    isIncrease: boolean('is_increase').default(true),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_testimonials_v_version_stats_order_idx').on(columns._order),
    _parentIDIdx: index('_testimonials_v_version_stats_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_testimonials_v.id],
      name: '_testimonials_v_version_stats_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _testimonials_v_version_stats_locales = pgTable(
  '_testimonials_v_version_stats_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_testimonials_v_version_stats_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_testimonials_v_version_stats.id],
      name: '_testimonials_v_version_stats_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _testimonials_v = pgTable(
  '_testimonials_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => testimonials.id, {
      onDelete: 'set null',
    }),
    version_media: integer('version_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_companyLogo: integer('version_company_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_authorInfo_avatar: integer('version_author_info_avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_rating: numeric('version_rating'),
    version_group_featured: boolean('version_group_featured').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__testimonials_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__testimonials_v_published_locale('published_locale'),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _testimonials_v_parent_idx: index('_testimonials_v_parent_idx').on(columns.parent),
    _testimonials_v_version_version_media_idx: index(
      '_testimonials_v_version_version_media_idx',
    ).on(columns.version_media),
    _testimonials_v_version_version_company_logo_idx: index(
      '_testimonials_v_version_version_company_logo_idx',
    ).on(columns.version_companyLogo),
    _testimonials_v_version_author_info_version_author_info_avatar_idx: index(
      '_testimonials_v_version_author_info_version_author_info_avatar_idx',
    ).on(columns.version_authorInfo_avatar),
    _testimonials_v_version_version_updated_at_idx: index(
      '_testimonials_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _testimonials_v_version_version_created_at_idx: index(
      '_testimonials_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _testimonials_v_version_version__status_idx: index(
      '_testimonials_v_version_version__status_idx',
    ).on(columns.version__status),
    _testimonials_v_created_at_idx: index('_testimonials_v_created_at_idx').on(columns.createdAt),
    _testimonials_v_updated_at_idx: index('_testimonials_v_updated_at_idx').on(columns.updatedAt),
    _testimonials_v_snapshot_idx: index('_testimonials_v_snapshot_idx').on(columns.snapshot),
    _testimonials_v_published_locale_idx: index('_testimonials_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _testimonials_v_latest_idx: index('_testimonials_v_latest_idx').on(columns.latest),
    _testimonials_v_autosave_idx: index('_testimonials_v_autosave_idx').on(columns.autosave),
  }),
)

export const _testimonials_v_locales = pgTable(
  '_testimonials_v_locales',
  {
    version_company: varchar('version_company'),
    version_authorInfo_name: varchar('version_author_info_name'),
    version_authorInfo_title: varchar('version_author_info_title'),
    version_quote: jsonb('version_quote'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('_testimonials_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_testimonials_v.id],
      name: '_testimonials_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _testimonials_v_rels = pgTable(
  '_testimonials_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_testimonials_v_rels_order_idx').on(columns.order),
    parentIdx: index('_testimonials_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_testimonials_v_rels_path_idx').on(columns.path),
    _testimonials_v_rels_categories_id_idx: index('_testimonials_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_testimonials_v.id],
      name: '_testimonials_v_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_testimonials_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const faq = pgTable(
  'faq',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    faq_updated_at_idx: index('faq_updated_at_idx').on(columns.updatedAt),
    faq_created_at_idx: index('faq_created_at_idx').on(columns.createdAt),
  }),
)

export const faq_locales = pgTable(
  'faq_locales',
  {
    question: varchar('question'),
    answer: jsonb('answer'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('faq_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [faq.id],
      name: 'faq_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox_locales = pgTable(
  'forms_blocks_checkbox_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_checkbox_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_checkbox.id],
      name: 'forms_blocks_checkbox_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country_locales = pgTable(
  'forms_blocks_country_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_country_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_country.id],
      name: 'forms_blocks_country_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email_locales = pgTable(
  'forms_blocks_email_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_email_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_email.id],
      name: 'forms_blocks_email_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message_locales = pgTable(
  'forms_blocks_message_locales',
  {
    message: jsonb('message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_message_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_message.id],
      name: 'forms_blocks_message_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number_locales = pgTable(
  'forms_blocks_number_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_number_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_number.id],
      name: 'forms_blocks_number_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options_locales = pgTable(
  'forms_blocks_select_options_locales',
  {
    label: varchar('label').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_select_options_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select_options.id],
      name: 'forms_blocks_select_options_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_locales = pgTable(
  'forms_blocks_select_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_select_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state_locales = pgTable(
  'forms_blocks_state_locales',
  {
    label: varchar('label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_state_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_state.id],
      name: 'forms_blocks_state_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text_locales = pgTable(
  'forms_blocks_text_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_text_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_text.id],
      name: 'forms_blocks_text_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea_locales = pgTable(
  'forms_blocks_textarea_locales',
  {
    label: varchar('label'),
    defaultValue: varchar('default_value'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_blocks_textarea_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_textarea.id],
      name: 'forms_blocks_textarea_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails_locales = pgTable(
  'forms_emails_locales',
  {
    subject: varchar('subject').notNull().default("You''ve received a new message."),
    message: jsonb('message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_emails_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_emails.id],
      name: 'forms_emails_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const forms_locales = pgTable(
  'forms_locales',
  {
    submitButtonLabel: varchar('submit_button_label'),
    confirmationMessage: jsonb('confirmation_message'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('forms_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_locales = pgTable(
  'search_locales',
  {
    title: varchar('title'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('search_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    appsID: integer('apps_id'),
    solutionsID: integer('solutions_id'),
    'app-iconsID': integer('app_icons_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    'media-categoriesID': integer('media_categories_id'),
    usersID: integer('users_id'),
    testimonialsID: integer('testimonials_id'),
    faqID: integer('faq_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_apps_id_idx: index(
      'payload_locked_documents_rels_apps_id_idx',
    ).on(columns.appsID),
    payload_locked_documents_rels_solutions_id_idx: index(
      'payload_locked_documents_rels_solutions_id_idx',
    ).on(columns.solutionsID),
    payload_locked_documents_rels_app_icons_id_idx: index(
      'payload_locked_documents_rels_app_icons_id_idx',
    ).on(columns['app-iconsID']),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_media_categories_id_idx: index(
      'payload_locked_documents_rels_media_categories_id_idx',
    ).on(columns['media-categoriesID']),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_testimonials_id_idx: index(
      'payload_locked_documents_rels_testimonials_id_idx',
    ).on(columns.testimonialsID),
    payload_locked_documents_rels_faq_id_idx: index('payload_locked_documents_rels_faq_id_idx').on(
      columns.faqID,
    ),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    appsIdFk: foreignKey({
      columns: [columns['appsID']],
      foreignColumns: [apps.id],
      name: 'payload_locked_documents_rels_apps_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'payload_locked_documents_rels_solutions_fk',
    }).onDelete('cascade'),
    'app-iconsIdFk': foreignKey({
      columns: [columns['app-iconsID']],
      foreignColumns: [app_icons.id],
      name: 'payload_locked_documents_rels_app_icons_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    'media-categoriesIdFk': foreignKey({
      columns: [columns['media-categoriesID']],
      foreignColumns: [media_categories.id],
      name: 'payload_locked_documents_rels_media_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    testimonialsIdFk: foreignKey({
      columns: [columns['testimonialsID']],
      foreignColumns: [testimonials.id],
      name: 'payload_locked_documents_rels_testimonials_fk',
    }).onDelete('cascade'),
    faqIdFk: foreignKey({
      columns: [columns['faqID']],
      foreignColumns: [faq.id],
      name: 'payload_locked_documents_rels_faq_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_tabs_description_links = pgTable(
  'header_tabs_description_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_tabs_description_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
  },
  (columns) => ({
    _orderIdx: index('header_tabs_description_links_order_idx').on(columns._order),
    _parentIDIdx: index('header_tabs_description_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs.id],
      name: 'header_tabs_description_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_description_links_locales = pgTable(
  'header_tabs_description_links_locales',
  {
    link_label: varchar('link_label').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('header_tabs_description_links_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_description_links.id],
      name: 'header_tabs_description_links_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items_featured_link_links = pgTable(
  'header_tabs_nav_items_featured_link_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_header_tabs_nav_items_featured_link_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_icon: varchar('link_icon'),
  },
  (columns) => ({
    _orderIdx: index('header_tabs_nav_items_featured_link_links_order_idx').on(columns._order),
    _parentIDIdx: index('header_tabs_nav_items_featured_link_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_nav_items.id],
      name: 'header_tabs_nav_items_featured_link_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items_featured_link_links_locales = pgTable(
  'header_tabs_nav_items_featured_link_links_locales',
  {
    link_label: varchar('link_label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'header_tabs_nav_items_featured_link_links_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_nav_items_featured_link_links.id],
      name: 'header_tabs_nav_items_featured_link_links_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items_list_links_links = pgTable(
  'header_tabs_nav_items_list_links_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type:
      enum_header_tabs_nav_items_list_links_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_description: varchar('link_description'),
    link_icon: varchar('link_icon'),
  },
  (columns) => ({
    _orderIdx: index('header_tabs_nav_items_list_links_links_order_idx').on(columns._order),
    _parentIDIdx: index('header_tabs_nav_items_list_links_links_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_nav_items.id],
      name: 'header_tabs_nav_items_list_links_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items_list_links_links_locales = pgTable(
  'header_tabs_nav_items_list_links_links_locales',
  {
    link_label: varchar('link_label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex(
      'header_tabs_nav_items_list_links_links_locales_locale_parent_id_unique',
    ).on(columns._locale, columns._parentID),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_nav_items_list_links_links.id],
      name: 'header_tabs_nav_items_list_links_links_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items = pgTable(
  'header_tabs_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    style: enum_header_tabs_nav_items_style('style').default('default'),
    defaultLink_link_type:
      enum_header_tabs_nav_items_default_link_link_type('default_link_link_type').default(
        'reference',
      ),
    defaultLink_link_newTab: boolean('default_link_link_new_tab'),
    defaultLink_link_url: varchar('default_link_link_url'),
    defaultLink_link_icon: varchar('default_link_link_icon'),
    defaultLink_description: varchar('default_link_description'),
    featuredLink_tag: varchar('featured_link_tag'),
    featuredLink_label: jsonb('featured_link_label'),
    listLinks_tag: varchar('list_links_tag'),
  },
  (columns) => ({
    _orderIdx: index('header_tabs_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_tabs_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs.id],
      name: 'header_tabs_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_nav_items_locales = pgTable(
  'header_tabs_nav_items_locales',
  {
    defaultLink_link_label: varchar('default_link_link_label'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('header_tabs_nav_items_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs_nav_items.id],
      name: 'header_tabs_nav_items_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs = pgTable(
  'header_tabs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    enableDirectLink: boolean('enable_direct_link').default(true),
    enableDropdown: boolean('enable_dropdown').default(false),
    link_type: enum_header_tabs_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
  },
  (columns) => ({
    _orderIdx: index('header_tabs_order_idx').on(columns._order),
    _parentIDIdx: index('header_tabs_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_tabs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_tabs_locales = pgTable(
  'header_tabs_locales',
  {
    label: varchar('label').notNull(),
    description: varchar('description'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('header_tabs_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_tabs.id],
      name: 'header_tabs_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_cta = pgTable(
  'header_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_cta_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_color: link_color('link_color').default('brand'),
    link_variant: link_variant('link_variant').default('primary'),
  },
  (columns) => ({
    _orderIdx: index('header_cta_order_idx').on(columns._order),
    _parentIDIdx: index('header_cta_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_cta_locales = pgTable(
  'header_cta_locales',
  {
    link_label: varchar('link_label').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('header_cta_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header_cta.id],
      name: 'header_cta_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    header_rels_solutions_id_idx: index('header_rels_solutions_id_idx').on(columns.solutionsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'header_rels_solutions_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_columns_nav_items = pgTable(
  'footer_columns_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_columns_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
  },
  (columns) => ({
    _orderIdx: index('footer_columns_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_columns_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_columns.id],
      name: 'footer_columns_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_columns_nav_items_locales = pgTable(
  'footer_columns_nav_items_locales',
  {
    link_label: varchar('link_label').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: varchar('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('footer_columns_nav_items_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer_columns_nav_items.id],
      name: 'footer_columns_nav_items_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_columns = pgTable(
  'footer_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_columns_order_idx').on(columns._order),
    _parentIDIdx: index('footer_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    solutionsID: integer('solutions_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    footer_rels_solutions_id_idx: index('footer_rels_solutions_id_idx').on(columns.solutionsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
    solutionsIdFk: foreignKey({
      columns: [columns['solutionsID']],
      foreignColumns: [solutions.id],
      name: 'footer_rels_solutions_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_hero_logos = relations(pages_hero_logos, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_logos._parentID],
    references: [pages.id],
    relationName: 'hero_logos',
  }),
  logo: one(media, {
    fields: [pages_hero_logos.logo],
    references: [media.id],
    relationName: 'logo',
  }),
}))
export const relations_pages_blocks_apps_block_header_links = relations(
  pages_blocks_apps_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_apps, {
      fields: [pages_blocks_apps_block_header_links._parentID],
      references: [pages_blocks_apps.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_apps_body_links = relations(
  pages_blocks_apps_body_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_apps, {
      fields: [pages_blocks_apps_body_links._parentID],
      references: [pages_blocks_apps.id],
      relationName: 'body_links',
    }),
  }),
)
export const relations_pages_blocks_apps = relations(pages_blocks_apps, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_apps._parentID],
    references: [pages.id],
    relationName: '_blocks_apps',
  }),
  blockHeader_links: many(pages_blocks_apps_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  body_links: many(pages_blocks_apps_body_links, {
    relationName: 'body_links',
  }),
  media: one(media, {
    fields: [pages_blocks_apps.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_pages_blocks_cta_block_header_links = relations(
  pages_blocks_cta_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_cta, {
      fields: [pages_blocks_cta_block_header_links._parentID],
      references: [pages_blocks_cta.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  blockHeader_links: many(pages_blocks_cta_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_block_header_links = relations(
  pages_blocks_content_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_block_header_links._parentID],
      references: [pages_blocks_content.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  blockHeader_links: many(pages_blocks_content_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_blocks_styled_list_items = relations(
  pages_blocks_styled_list_items,
  ({ one }) => ({
    _parentID: one(pages_blocks_styled_list, {
      fields: [pages_blocks_styled_list_items._parentID],
      references: [pages_blocks_styled_list.id],
      relationName: 'items',
    }),
  }),
)
export const relations_pages_blocks_styled_list = relations(
  pages_blocks_styled_list,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_styled_list._parentID],
      references: [pages.id],
      relationName: '_blocks_styledList',
    }),
    items: many(pages_blocks_styled_list_items, {
      relationName: 'items',
    }),
  }),
)
export const relations_pages_blocks_testimonials_block_header_links = relations(
  pages_blocks_testimonials_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_testimonials, {
      fields: [pages_blocks_testimonials_block_header_links._parentID],
      references: [pages_blocks_testimonials.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_testimonials = relations(
  pages_blocks_testimonials,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonials._parentID],
      references: [pages.id],
      relationName: '_blocks_testimonials',
    }),
    blockHeader_links: many(pages_blocks_testimonials_block_header_links, {
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_features_block_header_links = relations(
  pages_blocks_features_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_features, {
      fields: [pages_blocks_features_block_header_links._parentID],
      references: [pages_blocks_features.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_features_columns = relations(
  pages_blocks_features_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_features, {
      fields: [pages_blocks_features_columns._parentID],
      references: [pages_blocks_features.id],
      relationName: 'columns',
    }),
    image: one(media, {
      fields: [pages_blocks_features_columns.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_features = relations(
  pages_blocks_features,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_features._parentID],
      references: [pages.id],
      relationName: '_blocks_features',
    }),
    blockHeader_links: many(pages_blocks_features_block_header_links, {
      relationName: 'blockHeader_links',
    }),
    blockImage: one(media, {
      fields: [pages_blocks_features.blockImage],
      references: [media.id],
      relationName: 'blockImage',
    }),
    columns: many(pages_blocks_features_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_faq_block_block_header_links = relations(
  pages_blocks_faq_block_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_faq_block, {
      fields: [pages_blocks_faq_block_block_header_links._parentID],
      references: [pages_blocks_faq_block.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_faq_block = relations(
  pages_blocks_faq_block,
  ({ one, many }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_faq_block._parentID],
      references: [pages.id],
      relationName: '_blocks_faqBlock',
    }),
    blockHeader_links: many(pages_blocks_faq_block_block_header_links, {
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_gallery_block_header_links = relations(
  pages_blocks_gallery_block_header_links,
  ({ one }) => ({
    _parentID: one(pages_blocks_gallery, {
      fields: [pages_blocks_gallery_block_header_links._parentID],
      references: [pages_blocks_gallery.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations_pages_blocks_gallery_images = relations(
  pages_blocks_gallery_images,
  ({ one }) => ({
    _parentID: one(pages_blocks_gallery, {
      fields: [pages_blocks_gallery_images._parentID],
      references: [pages_blocks_gallery.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [pages_blocks_gallery_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations_pages_blocks_gallery = relations(pages_blocks_gallery, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_gallery._parentID],
    references: [pages.id],
    relationName: '_blocks_gallery',
  }),
  blockHeader_links: many(pages_blocks_gallery_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  images: many(pages_blocks_gallery_images, {
    relationName: 'images',
  }),
}))
export const relations_pages_breadcrumbs = relations(pages_breadcrumbs, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_breadcrumbs._parentID],
    references: [pages.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(pages, {
    fields: [pages_breadcrumbs.doc],
    references: [pages.id],
    relationName: 'doc',
  }),
}))
export const relations_pages_locales = relations(pages_locales, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_locales._parentID],
    references: [pages.id],
    relationName: '_locales',
  }),
  hero_media: one(media, {
    fields: [pages_locales.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  meta_image: one(media, {
    fields: [pages_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [pages_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
  appsID: one(apps, {
    fields: [pages_rels.appsID],
    references: [apps.id],
    relationName: 'apps',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  testimonialsID: one(testimonials, {
    fields: [pages_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  faqID: one(faq, {
    fields: [pages_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_logos: many(pages_hero_logos, {
    relationName: 'hero_logos',
  }),
  _blocks_apps: many(pages_blocks_apps, {
    relationName: '_blocks_apps',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_styledList: many(pages_blocks_styled_list, {
    relationName: '_blocks_styledList',
  }),
  _blocks_testimonials: many(pages_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_features: many(pages_blocks_features, {
    relationName: '_blocks_features',
  }),
  _blocks_faqBlock: many(pages_blocks_faq_block, {
    relationName: '_blocks_faqBlock',
  }),
  _blocks_gallery: many(pages_blocks_gallery, {
    relationName: '_blocks_gallery',
  }),
  parent: one(pages, {
    fields: [pages.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(pages_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
  _locales: many(pages_locales, {
    relationName: '_locales',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_version_hero_logos = relations(
  _pages_v_version_hero_logos,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_logos._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_logos',
    }),
    logo: one(media, {
      fields: [_pages_v_version_hero_logos.logo],
      references: [media.id],
      relationName: 'logo',
    }),
  }),
)
export const relations__pages_v_blocks_apps_block_header_links = relations(
  _pages_v_blocks_apps_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_apps, {
      fields: [_pages_v_blocks_apps_block_header_links._parentID],
      references: [_pages_v_blocks_apps.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_apps_body_links = relations(
  _pages_v_blocks_apps_body_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_apps, {
      fields: [_pages_v_blocks_apps_body_links._parentID],
      references: [_pages_v_blocks_apps.id],
      relationName: 'body_links',
    }),
  }),
)
export const relations__pages_v_blocks_apps = relations(_pages_v_blocks_apps, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_apps._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_apps',
  }),
  blockHeader_links: many(_pages_v_blocks_apps_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  body_links: many(_pages_v_blocks_apps_body_links, {
    relationName: 'body_links',
  }),
  media: one(media, {
    fields: [_pages_v_blocks_apps.media],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations__pages_v_blocks_cta_block_header_links = relations(
  _pages_v_blocks_cta_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_block_header_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  blockHeader_links: many(_pages_v_blocks_cta_block_header_links, {
    relationName: 'blockHeader_links',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_block_header_links = relations(
  _pages_v_blocks_content_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_block_header_links._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    blockHeader_links: many(_pages_v_blocks_content_block_header_links, {
      relationName: 'blockHeader_links',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_blocks_styled_list_items = relations(
  _pages_v_blocks_styled_list_items,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_styled_list, {
      fields: [_pages_v_blocks_styled_list_items._parentID],
      references: [_pages_v_blocks_styled_list.id],
      relationName: 'items',
    }),
  }),
)
export const relations__pages_v_blocks_styled_list = relations(
  _pages_v_blocks_styled_list,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_styled_list._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_styledList',
    }),
    items: many(_pages_v_blocks_styled_list_items, {
      relationName: 'items',
    }),
  }),
)
export const relations__pages_v_blocks_testimonials_block_header_links = relations(
  _pages_v_blocks_testimonials_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_testimonials, {
      fields: [_pages_v_blocks_testimonials_block_header_links._parentID],
      references: [_pages_v_blocks_testimonials.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_testimonials = relations(
  _pages_v_blocks_testimonials,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_testimonials._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_testimonials',
    }),
    blockHeader_links: many(_pages_v_blocks_testimonials_block_header_links, {
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_features_block_header_links = relations(
  _pages_v_blocks_features_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_features, {
      fields: [_pages_v_blocks_features_block_header_links._parentID],
      references: [_pages_v_blocks_features.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_features_columns = relations(
  _pages_v_blocks_features_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_features, {
      fields: [_pages_v_blocks_features_columns._parentID],
      references: [_pages_v_blocks_features.id],
      relationName: 'columns',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_features_columns.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_features = relations(
  _pages_v_blocks_features,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_features._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_features',
    }),
    blockHeader_links: many(_pages_v_blocks_features_block_header_links, {
      relationName: 'blockHeader_links',
    }),
    blockImage: one(media, {
      fields: [_pages_v_blocks_features.blockImage],
      references: [media.id],
      relationName: 'blockImage',
    }),
    columns: many(_pages_v_blocks_features_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_faq_block_block_header_links = relations(
  _pages_v_blocks_faq_block_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_faq_block, {
      fields: [_pages_v_blocks_faq_block_block_header_links._parentID],
      references: [_pages_v_blocks_faq_block.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_faq_block = relations(
  _pages_v_blocks_faq_block,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_faq_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_faqBlock',
    }),
    blockHeader_links: many(_pages_v_blocks_faq_block_block_header_links, {
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_gallery_block_header_links = relations(
  _pages_v_blocks_gallery_block_header_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_gallery, {
      fields: [_pages_v_blocks_gallery_block_header_links._parentID],
      references: [_pages_v_blocks_gallery.id],
      relationName: 'blockHeader_links',
    }),
  }),
)
export const relations__pages_v_blocks_gallery_images = relations(
  _pages_v_blocks_gallery_images,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_gallery, {
      fields: [_pages_v_blocks_gallery_images._parentID],
      references: [_pages_v_blocks_gallery.id],
      relationName: 'images',
    }),
    image: one(media, {
      fields: [_pages_v_blocks_gallery_images.image],
      references: [media.id],
      relationName: 'image',
    }),
  }),
)
export const relations__pages_v_blocks_gallery = relations(
  _pages_v_blocks_gallery,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_gallery._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_gallery',
    }),
    blockHeader_links: many(_pages_v_blocks_gallery_block_header_links, {
      relationName: 'blockHeader_links',
    }),
    images: many(_pages_v_blocks_gallery_images, {
      relationName: 'images',
    }),
  }),
)
export const relations__pages_v_version_breadcrumbs = relations(
  _pages_v_version_breadcrumbs,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_breadcrumbs._parentID],
      references: [_pages_v.id],
      relationName: 'version_breadcrumbs',
    }),
    doc: one(pages, {
      fields: [_pages_v_version_breadcrumbs.doc],
      references: [pages.id],
      relationName: 'doc',
    }),
  }),
)
export const relations__pages_v_locales = relations(_pages_v_locales, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_locales._parentID],
    references: [_pages_v.id],
    relationName: '_locales',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v_locales.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [_pages_v_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
  appsID: one(apps, {
    fields: [_pages_v_rels.appsID],
    references: [apps.id],
    relationName: 'apps',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  testimonialsID: one(testimonials, {
    fields: [_pages_v_rels.testimonialsID],
    references: [testimonials.id],
    relationName: 'testimonials',
  }),
  faqID: one(faq, {
    fields: [_pages_v_rels.faqID],
    references: [faq.id],
    relationName: 'faq',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_logos: many(_pages_v_version_hero_logos, {
    relationName: 'version_hero_logos',
  }),
  _blocks_apps: many(_pages_v_blocks_apps, {
    relationName: '_blocks_apps',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  _blocks_styledList: many(_pages_v_blocks_styled_list, {
    relationName: '_blocks_styledList',
  }),
  _blocks_testimonials: many(_pages_v_blocks_testimonials, {
    relationName: '_blocks_testimonials',
  }),
  _blocks_features: many(_pages_v_blocks_features, {
    relationName: '_blocks_features',
  }),
  _blocks_faqBlock: many(_pages_v_blocks_faq_block, {
    relationName: '_blocks_faqBlock',
  }),
  _blocks_gallery: many(_pages_v_blocks_gallery, {
    relationName: '_blocks_gallery',
  }),
  version_parent: one(pages, {
    fields: [_pages_v.version_parent],
    references: [pages.id],
    relationName: 'version_parent',
  }),
  version_breadcrumbs: many(_pages_v_version_breadcrumbs, {
    relationName: 'version_breadcrumbs',
  }),
  _locales: many(_pages_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_locales = relations(posts_locales, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_locales._parentID],
    references: [posts.id],
    relationName: '_locales',
  }),
  heroImage: one(media, {
    fields: [posts_locales.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts_locales.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ many }) => ({
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _locales: many(posts_locales, {
    relationName: '_locales',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_locales = relations(_posts_v_locales, ({ one }) => ({
  _parentID: one(_posts_v, {
    fields: [_posts_v_locales._parentID],
    references: [_posts_v.id],
    relationName: '_locales',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v_locales.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v_locales.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
}))
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _locales: many(_posts_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_apps_hero_links = relations(apps_hero_links, ({ one }) => ({
  _parentID: one(apps, {
    fields: [apps_hero_links._parentID],
    references: [apps.id],
    relationName: 'hero_links',
  }),
}))
export const relations_apps_hero_logos = relations(apps_hero_logos, ({ one }) => ({
  _parentID: one(apps, {
    fields: [apps_hero_logos._parentID],
    references: [apps.id],
    relationName: 'hero_logos',
  }),
  logo: one(media, {
    fields: [apps_hero_logos.logo],
    references: [media.id],
    relationName: 'logo',
  }),
}))
export const relations_apps_features_locales = relations(apps_features_locales, ({ one }) => ({
  _parentID: one(apps_features, {
    fields: [apps_features_locales._parentID],
    references: [apps_features.id],
    relationName: '_locales',
  }),
}))
export const relations_apps_features = relations(apps_features, ({ one, many }) => ({
  _parentID: one(apps, {
    fields: [apps_features._parentID],
    references: [apps.id],
    relationName: 'features',
  }),
  _locales: many(apps_features_locales, {
    relationName: '_locales',
  }),
}))
export const relations_apps_locales = relations(apps_locales, ({ one }) => ({
  _parentID: one(apps, {
    fields: [apps_locales._parentID],
    references: [apps.id],
    relationName: '_locales',
  }),
  hero_media: one(media, {
    fields: [apps_locales.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
}))
export const relations_apps_rels = relations(apps_rels, ({ one }) => ({
  parent: one(apps, {
    fields: [apps_rels.parent],
    references: [apps.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [apps_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [apps_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [apps_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
  appsID: one(apps, {
    fields: [apps_rels.appsID],
    references: [apps.id],
    relationName: 'apps',
  }),
  mediaID: one(media, {
    fields: [apps_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations_apps = relations(apps, ({ one, many }) => ({
  icon: one(media, {
    fields: [apps.icon],
    references: [media.id],
    relationName: 'icon',
  }),
  hero_links: many(apps_hero_links, {
    relationName: 'hero_links',
  }),
  hero_logos: many(apps_hero_logos, {
    relationName: 'hero_logos',
  }),
  features: many(apps_features, {
    relationName: 'features',
  }),
  _locales: many(apps_locales, {
    relationName: '_locales',
  }),
  _rels: many(apps_rels, {
    relationName: '_rels',
  }),
}))
export const relations__apps_v_version_hero_links = relations(
  _apps_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_apps_v, {
      fields: [_apps_v_version_hero_links._parentID],
      references: [_apps_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__apps_v_version_hero_logos = relations(
  _apps_v_version_hero_logos,
  ({ one }) => ({
    _parentID: one(_apps_v, {
      fields: [_apps_v_version_hero_logos._parentID],
      references: [_apps_v.id],
      relationName: 'version_hero_logos',
    }),
    logo: one(media, {
      fields: [_apps_v_version_hero_logos.logo],
      references: [media.id],
      relationName: 'logo',
    }),
  }),
)
export const relations__apps_v_version_features_locales = relations(
  _apps_v_version_features_locales,
  ({ one }) => ({
    _parentID: one(_apps_v_version_features, {
      fields: [_apps_v_version_features_locales._parentID],
      references: [_apps_v_version_features.id],
      relationName: '_locales',
    }),
  }),
)
export const relations__apps_v_version_features = relations(
  _apps_v_version_features,
  ({ one, many }) => ({
    _parentID: one(_apps_v, {
      fields: [_apps_v_version_features._parentID],
      references: [_apps_v.id],
      relationName: 'version_features',
    }),
    _locales: many(_apps_v_version_features_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations__apps_v_locales = relations(_apps_v_locales, ({ one }) => ({
  _parentID: one(_apps_v, {
    fields: [_apps_v_locales._parentID],
    references: [_apps_v.id],
    relationName: '_locales',
  }),
  version_hero_media: one(media, {
    fields: [_apps_v_locales.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
}))
export const relations__apps_v_rels = relations(_apps_v_rels, ({ one }) => ({
  parent: one(_apps_v, {
    fields: [_apps_v_rels.parent],
    references: [_apps_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_apps_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_apps_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [_apps_v_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
  appsID: one(apps, {
    fields: [_apps_v_rels.appsID],
    references: [apps.id],
    relationName: 'apps',
  }),
  mediaID: one(media, {
    fields: [_apps_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
}))
export const relations__apps_v = relations(_apps_v, ({ one, many }) => ({
  parent: one(apps, {
    fields: [_apps_v.parent],
    references: [apps.id],
    relationName: 'parent',
  }),
  version_icon: one(media, {
    fields: [_apps_v.version_icon],
    references: [media.id],
    relationName: 'version_icon',
  }),
  version_hero_links: many(_apps_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_logos: many(_apps_v_version_hero_logos, {
    relationName: 'version_hero_logos',
  }),
  version_features: many(_apps_v_version_features, {
    relationName: 'version_features',
  }),
  _locales: many(_apps_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_apps_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_solutions_locales = relations(solutions_locales, ({ one }) => ({
  _parentID: one(solutions, {
    fields: [solutions_locales._parentID],
    references: [solutions.id],
    relationName: '_locales',
  }),
}))
export const relations_solutions_rels = relations(solutions_rels, ({ one }) => ({
  parent: one(solutions, {
    fields: [solutions_rels.parent],
    references: [solutions.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [solutions_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [solutions_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [solutions_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
}))
export const relations_solutions = relations(solutions, ({ one, many }) => ({
  icon: one(media, {
    fields: [solutions.icon],
    references: [media.id],
    relationName: 'icon',
  }),
  _locales: many(solutions_locales, {
    relationName: '_locales',
  }),
  _rels: many(solutions_rels, {
    relationName: '_rels',
  }),
}))
export const relations__solutions_v_locales = relations(_solutions_v_locales, ({ one }) => ({
  _parentID: one(_solutions_v, {
    fields: [_solutions_v_locales._parentID],
    references: [_solutions_v.id],
    relationName: '_locales',
  }),
}))
export const relations__solutions_v_rels = relations(_solutions_v_rels, ({ one }) => ({
  parent: one(_solutions_v, {
    fields: [_solutions_v_rels.parent],
    references: [_solutions_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_solutions_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_solutions_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [_solutions_v_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
}))
export const relations__solutions_v = relations(_solutions_v, ({ one, many }) => ({
  parent: one(solutions, {
    fields: [_solutions_v.parent],
    references: [solutions.id],
    relationName: 'parent',
  }),
  version_icon: one(media, {
    fields: [_solutions_v.version_icon],
    references: [media.id],
    relationName: 'version_icon',
  }),
  _locales: many(_solutions_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_solutions_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_app_icons = relations(app_icons, () => ({}))
export const relations_media = relations(media, ({ one }) => ({
  category: one(media_categories, {
    fields: [media.category],
    references: [media_categories.id],
    relationName: 'category',
  }),
}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories_locales = relations(categories_locales, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_locales._parentID],
    references: [categories.id],
    relationName: '_locales',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
  _locales: many(categories_locales, {
    relationName: '_locales',
  }),
}))
export const relations_media_categories = relations(media_categories, () => ({}))
export const relations_users = relations(users, () => ({}))
export const relations_testimonials_stats_locales = relations(
  testimonials_stats_locales,
  ({ one }) => ({
    _parentID: one(testimonials_stats, {
      fields: [testimonials_stats_locales._parentID],
      references: [testimonials_stats.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_testimonials_stats = relations(testimonials_stats, ({ one, many }) => ({
  _parentID: one(testimonials, {
    fields: [testimonials_stats._parentID],
    references: [testimonials.id],
    relationName: 'stats',
  }),
  _locales: many(testimonials_stats_locales, {
    relationName: '_locales',
  }),
}))
export const relations_testimonials_locales = relations(testimonials_locales, ({ one }) => ({
  _parentID: one(testimonials, {
    fields: [testimonials_locales._parentID],
    references: [testimonials.id],
    relationName: '_locales',
  }),
}))
export const relations_testimonials_rels = relations(testimonials_rels, ({ one }) => ({
  parent: one(testimonials, {
    fields: [testimonials_rels.parent],
    references: [testimonials.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [testimonials_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_testimonials = relations(testimonials, ({ one, many }) => ({
  media: one(media, {
    fields: [testimonials.media],
    references: [media.id],
    relationName: 'media',
  }),
  companyLogo: one(media, {
    fields: [testimonials.companyLogo],
    references: [media.id],
    relationName: 'companyLogo',
  }),
  authorInfo_avatar: one(media, {
    fields: [testimonials.authorInfo_avatar],
    references: [media.id],
    relationName: 'authorInfo_avatar',
  }),
  stats: many(testimonials_stats, {
    relationName: 'stats',
  }),
  _locales: many(testimonials_locales, {
    relationName: '_locales',
  }),
  _rels: many(testimonials_rels, {
    relationName: '_rels',
  }),
}))
export const relations__testimonials_v_version_stats_locales = relations(
  _testimonials_v_version_stats_locales,
  ({ one }) => ({
    _parentID: one(_testimonials_v_version_stats, {
      fields: [_testimonials_v_version_stats_locales._parentID],
      references: [_testimonials_v_version_stats.id],
      relationName: '_locales',
    }),
  }),
)
export const relations__testimonials_v_version_stats = relations(
  _testimonials_v_version_stats,
  ({ one, many }) => ({
    _parentID: one(_testimonials_v, {
      fields: [_testimonials_v_version_stats._parentID],
      references: [_testimonials_v.id],
      relationName: 'version_stats',
    }),
    _locales: many(_testimonials_v_version_stats_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations__testimonials_v_locales = relations(_testimonials_v_locales, ({ one }) => ({
  _parentID: one(_testimonials_v, {
    fields: [_testimonials_v_locales._parentID],
    references: [_testimonials_v.id],
    relationName: '_locales',
  }),
}))
export const relations__testimonials_v_rels = relations(_testimonials_v_rels, ({ one }) => ({
  parent: one(_testimonials_v, {
    fields: [_testimonials_v_rels.parent],
    references: [_testimonials_v.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [_testimonials_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__testimonials_v = relations(_testimonials_v, ({ one, many }) => ({
  parent: one(testimonials, {
    fields: [_testimonials_v.parent],
    references: [testimonials.id],
    relationName: 'parent',
  }),
  version_media: one(media, {
    fields: [_testimonials_v.version_media],
    references: [media.id],
    relationName: 'version_media',
  }),
  version_companyLogo: one(media, {
    fields: [_testimonials_v.version_companyLogo],
    references: [media.id],
    relationName: 'version_companyLogo',
  }),
  version_authorInfo_avatar: one(media, {
    fields: [_testimonials_v.version_authorInfo_avatar],
    references: [media.id],
    relationName: 'version_authorInfo_avatar',
  }),
  version_stats: many(_testimonials_v_version_stats, {
    relationName: 'version_stats',
  }),
  _locales: many(_testimonials_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_testimonials_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_faq_locales = relations(faq_locales, ({ one }) => ({
  _parentID: one(faq, {
    fields: [faq_locales._parentID],
    references: [faq.id],
    relationName: '_locales',
  }),
}))
export const relations_faq = relations(faq, ({ many }) => ({
  _locales: many(faq_locales, {
    relationName: '_locales',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox_locales = relations(
  forms_blocks_checkbox_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_checkbox, {
      fields: [forms_blocks_checkbox_locales._parentID],
      references: [forms_blocks_checkbox.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_checkbox = relations(
  forms_blocks_checkbox,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_checkbox._parentID],
      references: [forms.id],
      relationName: '_blocks_checkbox',
    }),
    _locales: many(forms_blocks_checkbox_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_country_locales = relations(
  forms_blocks_country_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_country, {
      fields: [forms_blocks_country_locales._parentID],
      references: [forms_blocks_country.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
  _locales: many(forms_blocks_country_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_email_locales = relations(
  forms_blocks_email_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_email, {
      fields: [forms_blocks_email_locales._parentID],
      references: [forms_blocks_email.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
  _locales: many(forms_blocks_email_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_message_locales = relations(
  forms_blocks_message_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_message, {
      fields: [forms_blocks_message_locales._parentID],
      references: [forms_blocks_message.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
  _locales: many(forms_blocks_message_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_number_locales = relations(
  forms_blocks_number_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_number, {
      fields: [forms_blocks_number_locales._parentID],
      references: [forms_blocks_number.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
  _locales: many(forms_blocks_number_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_select_options_locales = relations(
  forms_blocks_select_options_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_select_options, {
      fields: [forms_blocks_select_options_locales._parentID],
      references: [forms_blocks_select_options.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one, many }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
    _locales: many(forms_blocks_select_options_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select_locales = relations(
  forms_blocks_select_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_locales._parentID],
      references: [forms_blocks_select.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  _locales: many(forms_blocks_select_locales, {
    relationName: '_locales',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state_locales = relations(
  forms_blocks_state_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_state, {
      fields: [forms_blocks_state_locales._parentID],
      references: [forms_blocks_state.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
  _locales: many(forms_blocks_state_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_text_locales = relations(
  forms_blocks_text_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_text, {
      fields: [forms_blocks_text_locales._parentID],
      references: [forms_blocks_text.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
  _locales: many(forms_blocks_text_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_blocks_textarea_locales = relations(
  forms_blocks_textarea_locales,
  ({ one }) => ({
    _parentID: one(forms_blocks_textarea, {
      fields: [forms_blocks_textarea_locales._parentID],
      references: [forms_blocks_textarea.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_blocks_textarea = relations(
  forms_blocks_textarea,
  ({ one, many }) => ({
    _parentID: one(forms, {
      fields: [forms_blocks_textarea._parentID],
      references: [forms.id],
      relationName: '_blocks_textarea',
    }),
    _locales: many(forms_blocks_textarea_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_forms_emails_locales = relations(forms_emails_locales, ({ one }) => ({
  _parentID: one(forms_emails, {
    fields: [forms_emails_locales._parentID],
    references: [forms_emails.id],
    relationName: '_locales',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
  _locales: many(forms_emails_locales, {
    relationName: '_locales',
  }),
}))
export const relations_forms_locales = relations(forms_locales, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_locales._parentID],
    references: [forms.id],
    relationName: '_locales',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
  _locales: many(forms_locales, {
    relationName: '_locales',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_locales = relations(search_locales, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_locales._parentID],
    references: [search.id],
    relationName: '_locales',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _locales: many(search_locales, {
    relationName: '_locales',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    appsID: one(apps, {
      fields: [payload_locked_documents_rels.appsID],
      references: [apps.id],
      relationName: 'apps',
    }),
    solutionsID: one(solutions, {
      fields: [payload_locked_documents_rels.solutionsID],
      references: [solutions.id],
      relationName: 'solutions',
    }),
    'app-iconsID': one(app_icons, {
      fields: [payload_locked_documents_rels['app-iconsID']],
      references: [app_icons.id],
      relationName: 'app-icons',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    'media-categoriesID': one(media_categories, {
      fields: [payload_locked_documents_rels['media-categoriesID']],
      references: [media_categories.id],
      relationName: 'media-categories',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    testimonialsID: one(testimonials, {
      fields: [payload_locked_documents_rels.testimonialsID],
      references: [testimonials.id],
      relationName: 'testimonials',
    }),
    faqID: one(faq, {
      fields: [payload_locked_documents_rels.faqID],
      references: [faq.id],
      relationName: 'faq',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_tabs_description_links_locales = relations(
  header_tabs_description_links_locales,
  ({ one }) => ({
    _parentID: one(header_tabs_description_links, {
      fields: [header_tabs_description_links_locales._parentID],
      references: [header_tabs_description_links.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_description_links = relations(
  header_tabs_description_links,
  ({ one, many }) => ({
    _parentID: one(header_tabs, {
      fields: [header_tabs_description_links._parentID],
      references: [header_tabs.id],
      relationName: 'descriptionLinks',
    }),
    _locales: many(header_tabs_description_links_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items_featured_link_links_locales = relations(
  header_tabs_nav_items_featured_link_links_locales,
  ({ one }) => ({
    _parentID: one(header_tabs_nav_items_featured_link_links, {
      fields: [header_tabs_nav_items_featured_link_links_locales._parentID],
      references: [header_tabs_nav_items_featured_link_links.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items_featured_link_links = relations(
  header_tabs_nav_items_featured_link_links,
  ({ one, many }) => ({
    _parentID: one(header_tabs_nav_items, {
      fields: [header_tabs_nav_items_featured_link_links._parentID],
      references: [header_tabs_nav_items.id],
      relationName: 'featuredLink_links',
    }),
    _locales: many(header_tabs_nav_items_featured_link_links_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items_list_links_links_locales = relations(
  header_tabs_nav_items_list_links_links_locales,
  ({ one }) => ({
    _parentID: one(header_tabs_nav_items_list_links_links, {
      fields: [header_tabs_nav_items_list_links_links_locales._parentID],
      references: [header_tabs_nav_items_list_links_links.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items_list_links_links = relations(
  header_tabs_nav_items_list_links_links,
  ({ one, many }) => ({
    _parentID: one(header_tabs_nav_items, {
      fields: [header_tabs_nav_items_list_links_links._parentID],
      references: [header_tabs_nav_items.id],
      relationName: 'listLinks_links',
    }),
    _locales: many(header_tabs_nav_items_list_links_links_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items_locales = relations(
  header_tabs_nav_items_locales,
  ({ one }) => ({
    _parentID: one(header_tabs_nav_items, {
      fields: [header_tabs_nav_items_locales._parentID],
      references: [header_tabs_nav_items.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_header_tabs_nav_items = relations(
  header_tabs_nav_items,
  ({ one, many }) => ({
    _parentID: one(header_tabs, {
      fields: [header_tabs_nav_items._parentID],
      references: [header_tabs.id],
      relationName: 'navItems',
    }),
    _locales: many(header_tabs_nav_items_locales, {
      relationName: '_locales',
    }),
    featuredLink_links: many(header_tabs_nav_items_featured_link_links, {
      relationName: 'featuredLink_links',
    }),
    listLinks_links: many(header_tabs_nav_items_list_links_links, {
      relationName: 'listLinks_links',
    }),
  }),
)
export const relations_header_tabs_locales = relations(header_tabs_locales, ({ one }) => ({
  _parentID: one(header_tabs, {
    fields: [header_tabs_locales._parentID],
    references: [header_tabs.id],
    relationName: '_locales',
  }),
}))
export const relations_header_tabs = relations(header_tabs, ({ one, many }) => ({
  _parentID: one(header, {
    fields: [header_tabs._parentID],
    references: [header.id],
    relationName: 'tabs',
  }),
  _locales: many(header_tabs_locales, {
    relationName: '_locales',
  }),
  descriptionLinks: many(header_tabs_description_links, {
    relationName: 'descriptionLinks',
  }),
  navItems: many(header_tabs_nav_items, {
    relationName: 'navItems',
  }),
}))
export const relations_header_cta_locales = relations(header_cta_locales, ({ one }) => ({
  _parentID: one(header_cta, {
    fields: [header_cta_locales._parentID],
    references: [header_cta.id],
    relationName: '_locales',
  }),
}))
export const relations_header_cta = relations(header_cta, ({ one, many }) => ({
  _parentID: one(header, {
    fields: [header_cta._parentID],
    references: [header.id],
    relationName: 'cta',
  }),
  _locales: many(header_cta_locales, {
    relationName: '_locales',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [header_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  tabs: many(header_tabs, {
    relationName: 'tabs',
  }),
  cta: many(header_cta, {
    relationName: 'cta',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_columns_nav_items_locales = relations(
  footer_columns_nav_items_locales,
  ({ one }) => ({
    _parentID: one(footer_columns_nav_items, {
      fields: [footer_columns_nav_items_locales._parentID],
      references: [footer_columns_nav_items.id],
      relationName: '_locales',
    }),
  }),
)
export const relations_footer_columns_nav_items = relations(
  footer_columns_nav_items,
  ({ one, many }) => ({
    _parentID: one(footer_columns, {
      fields: [footer_columns_nav_items._parentID],
      references: [footer_columns.id],
      relationName: 'navItems',
    }),
    _locales: many(footer_columns_nav_items_locales, {
      relationName: '_locales',
    }),
  }),
)
export const relations_footer_columns = relations(footer_columns, ({ one, many }) => ({
  _parentID: one(footer, {
    fields: [footer_columns._parentID],
    references: [footer.id],
    relationName: 'columns',
  }),
  navItems: many(footer_columns_nav_items, {
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  solutionsID: one(solutions, {
    fields: [footer_rels.solutionsID],
    references: [solutions.id],
    relationName: 'solutions',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  columns: many(footer_columns, {
    relationName: 'columns',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  link_color: typeof link_color
  link_variant: typeof link_variant
  enum_pages_blocks_apps_block_header_links_link_type: typeof enum_pages_blocks_apps_block_header_links_link_type
  enum_pages_blocks_apps_body_links_link_type: typeof enum_pages_blocks_apps_body_links_link_type
  enum_pages_blocks_apps_block_header_type: typeof enum_pages_blocks_apps_block_header_type
  enum_pages_blocks_apps_block_header_badge_type: typeof enum_pages_blocks_apps_block_header_badge_type
  badge_color: typeof badge_color
  badge_icon_position: typeof badge_icon_position
  enum_pages_blocks_apps_type: typeof enum_pages_blocks_apps_type
  enum_pages_blocks_apps_body_badge_type: typeof enum_pages_blocks_apps_body_badge_type
  enum_pages_blocks_cta_block_header_links_link_type: typeof enum_pages_blocks_cta_block_header_links_link_type
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_block_header_type: typeof enum_pages_blocks_cta_block_header_type
  enum_pages_blocks_cta_block_header_badge_type: typeof enum_pages_blocks_cta_block_header_badge_type
  enum_pages_blocks_content_block_header_links_link_type: typeof enum_pages_blocks_content_block_header_links_link_type
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_block_header_type: typeof enum_pages_blocks_content_block_header_type
  enum_pages_blocks_content_block_header_badge_type: typeof enum_pages_blocks_content_block_header_badge_type
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_blocks_styled_list_list_style: typeof enum_pages_blocks_styled_list_list_style
  enum_pages_blocks_testimonials_block_header_links_link_type: typeof enum_pages_blocks_testimonials_block_header_links_link_type
  enum_pages_blocks_testimonials_block_header_type: typeof enum_pages_blocks_testimonials_block_header_type
  enum_pages_blocks_testimonials_block_header_badge_type: typeof enum_pages_blocks_testimonials_block_header_badge_type
  enum_pages_blocks_testimonials_type: typeof enum_pages_blocks_testimonials_type
  enum_pages_blocks_features_block_header_links_link_type: typeof enum_pages_blocks_features_block_header_links_link_type
  enum_pages_blocks_features_columns_size: typeof enum_pages_blocks_features_columns_size
  enum_pages_blocks_features_columns_badge_type: typeof enum_pages_blocks_features_columns_badge_type
  enum_pages_blocks_features_columns_link_type: typeof enum_pages_blocks_features_columns_link_type
  enum_pages_blocks_features_block_header_type: typeof enum_pages_blocks_features_block_header_type
  enum_pages_blocks_features_block_header_badge_type: typeof enum_pages_blocks_features_block_header_badge_type
  enum_pages_blocks_features_layout: typeof enum_pages_blocks_features_layout
  enum_pages_blocks_features_link_type: typeof enum_pages_blocks_features_link_type
  enum_pages_blocks_faq_block_block_header_links_link_type: typeof enum_pages_blocks_faq_block_block_header_links_link_type
  enum_pages_blocks_faq_block_block_header_type: typeof enum_pages_blocks_faq_block_block_header_type
  enum_pages_blocks_faq_block_block_header_badge_type: typeof enum_pages_blocks_faq_block_block_header_badge_type
  enum_pages_blocks_gallery_block_header_links_link_type: typeof enum_pages_blocks_gallery_block_header_links_link_type
  enum_pages_blocks_gallery_block_header_type: typeof enum_pages_blocks_gallery_block_header_type
  enum_pages_blocks_gallery_block_header_badge_type: typeof enum_pages_blocks_gallery_block_header_badge_type
  enum_pages_blocks_gallery_type: typeof enum_pages_blocks_gallery_type
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_hero_badge_type: typeof enum_pages_hero_badge_type
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_blocks_apps_block_header_links_link_type: typeof enum__pages_v_blocks_apps_block_header_links_link_type
  enum__pages_v_blocks_apps_body_links_link_type: typeof enum__pages_v_blocks_apps_body_links_link_type
  enum__pages_v_blocks_apps_block_header_type: typeof enum__pages_v_blocks_apps_block_header_type
  enum__pages_v_blocks_apps_block_header_badge_type: typeof enum__pages_v_blocks_apps_block_header_badge_type
  enum__pages_v_blocks_apps_type: typeof enum__pages_v_blocks_apps_type
  enum__pages_v_blocks_apps_body_badge_type: typeof enum__pages_v_blocks_apps_body_badge_type
  enum__pages_v_blocks_cta_block_header_links_link_type: typeof enum__pages_v_blocks_cta_block_header_links_link_type
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_block_header_type: typeof enum__pages_v_blocks_cta_block_header_type
  enum__pages_v_blocks_cta_block_header_badge_type: typeof enum__pages_v_blocks_cta_block_header_badge_type
  enum__pages_v_blocks_content_block_header_links_link_type: typeof enum__pages_v_blocks_content_block_header_links_link_type
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_block_header_type: typeof enum__pages_v_blocks_content_block_header_type
  enum__pages_v_blocks_content_block_header_badge_type: typeof enum__pages_v_blocks_content_block_header_badge_type
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_blocks_styled_list_list_style: typeof enum__pages_v_blocks_styled_list_list_style
  enum__pages_v_blocks_testimonials_block_header_links_link_type: typeof enum__pages_v_blocks_testimonials_block_header_links_link_type
  enum__pages_v_blocks_testimonials_block_header_type: typeof enum__pages_v_blocks_testimonials_block_header_type
  enum__pages_v_blocks_testimonials_block_header_badge_type: typeof enum__pages_v_blocks_testimonials_block_header_badge_type
  enum__pages_v_blocks_testimonials_type: typeof enum__pages_v_blocks_testimonials_type
  enum__pages_v_blocks_features_block_header_links_link_type: typeof enum__pages_v_blocks_features_block_header_links_link_type
  enum__pages_v_blocks_features_columns_size: typeof enum__pages_v_blocks_features_columns_size
  enum__pages_v_blocks_features_columns_badge_type: typeof enum__pages_v_blocks_features_columns_badge_type
  enum__pages_v_blocks_features_columns_link_type: typeof enum__pages_v_blocks_features_columns_link_type
  enum__pages_v_blocks_features_block_header_type: typeof enum__pages_v_blocks_features_block_header_type
  enum__pages_v_blocks_features_block_header_badge_type: typeof enum__pages_v_blocks_features_block_header_badge_type
  enum__pages_v_blocks_features_layout: typeof enum__pages_v_blocks_features_layout
  enum__pages_v_blocks_features_link_type: typeof enum__pages_v_blocks_features_link_type
  enum__pages_v_blocks_faq_block_block_header_links_link_type: typeof enum__pages_v_blocks_faq_block_block_header_links_link_type
  enum__pages_v_blocks_faq_block_block_header_type: typeof enum__pages_v_blocks_faq_block_block_header_type
  enum__pages_v_blocks_faq_block_block_header_badge_type: typeof enum__pages_v_blocks_faq_block_block_header_badge_type
  enum__pages_v_blocks_gallery_block_header_links_link_type: typeof enum__pages_v_blocks_gallery_block_header_links_link_type
  enum__pages_v_blocks_gallery_block_header_type: typeof enum__pages_v_blocks_gallery_block_header_type
  enum__pages_v_blocks_gallery_block_header_badge_type: typeof enum__pages_v_blocks_gallery_block_header_badge_type
  enum__pages_v_blocks_gallery_type: typeof enum__pages_v_blocks_gallery_type
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_hero_badge_type: typeof enum__pages_v_version_hero_badge_type
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum__pages_v_published_locale: typeof enum__pages_v_published_locale
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum__posts_v_published_locale: typeof enum__posts_v_published_locale
  enum_apps_hero_links_link_type: typeof enum_apps_hero_links_link_type
  enum_apps_link_type: typeof enum_apps_link_type
  enum_apps_hero_type: typeof enum_apps_hero_type
  enum_apps_hero_badge_type: typeof enum_apps_hero_badge_type
  enum_apps_status: typeof enum_apps_status
  enum__apps_v_version_hero_links_link_type: typeof enum__apps_v_version_hero_links_link_type
  enum__apps_v_version_link_type: typeof enum__apps_v_version_link_type
  enum__apps_v_version_hero_type: typeof enum__apps_v_version_hero_type
  enum__apps_v_version_hero_badge_type: typeof enum__apps_v_version_hero_badge_type
  enum__apps_v_version_status: typeof enum__apps_v_version_status
  enum__apps_v_published_locale: typeof enum__apps_v_published_locale
  enum_solutions_link_type: typeof enum_solutions_link_type
  enum_solutions_ecosystem: typeof enum_solutions_ecosystem
  enum_solutions_status: typeof enum_solutions_status
  enum__solutions_v_version_link_type: typeof enum__solutions_v_version_link_type
  enum__solutions_v_version_ecosystem: typeof enum__solutions_v_version_ecosystem
  enum__solutions_v_version_status: typeof enum__solutions_v_version_status
  enum__solutions_v_published_locale: typeof enum__solutions_v_published_locale
  enum_app_icons_category: typeof enum_app_icons_category
  enum_testimonials_status: typeof enum_testimonials_status
  enum__testimonials_v_version_status: typeof enum__testimonials_v_version_status
  enum__testimonials_v_published_locale: typeof enum__testimonials_v_published_locale
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_tabs_description_links_link_type: typeof enum_header_tabs_description_links_link_type
  enum_header_tabs_nav_items_featured_link_links_link_type: typeof enum_header_tabs_nav_items_featured_link_links_link_type
  enum_header_tabs_nav_items_list_links_links_link_type: typeof enum_header_tabs_nav_items_list_links_links_link_type
  enum_header_tabs_nav_items_style: typeof enum_header_tabs_nav_items_style
  enum_header_tabs_nav_items_default_link_link_type: typeof enum_header_tabs_nav_items_default_link_link_type
  enum_header_tabs_link_type: typeof enum_header_tabs_link_type
  enum_header_cta_link_type: typeof enum_header_cta_link_type
  enum_footer_columns_nav_items_link_type: typeof enum_footer_columns_nav_items_link_type
  pages_hero_links: typeof pages_hero_links
  pages_hero_logos: typeof pages_hero_logos
  pages_blocks_apps_block_header_links: typeof pages_blocks_apps_block_header_links
  pages_blocks_apps_body_links: typeof pages_blocks_apps_body_links
  pages_blocks_apps: typeof pages_blocks_apps
  pages_blocks_cta_block_header_links: typeof pages_blocks_cta_block_header_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_block_header_links: typeof pages_blocks_content_block_header_links
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages_blocks_styled_list_items: typeof pages_blocks_styled_list_items
  pages_blocks_styled_list: typeof pages_blocks_styled_list
  pages_blocks_testimonials_block_header_links: typeof pages_blocks_testimonials_block_header_links
  pages_blocks_testimonials: typeof pages_blocks_testimonials
  pages_blocks_features_block_header_links: typeof pages_blocks_features_block_header_links
  pages_blocks_features_columns: typeof pages_blocks_features_columns
  pages_blocks_features: typeof pages_blocks_features
  pages_blocks_faq_block_block_header_links: typeof pages_blocks_faq_block_block_header_links
  pages_blocks_faq_block: typeof pages_blocks_faq_block
  pages_blocks_gallery_block_header_links: typeof pages_blocks_gallery_block_header_links
  pages_blocks_gallery_images: typeof pages_blocks_gallery_images
  pages_blocks_gallery: typeof pages_blocks_gallery
  pages_breadcrumbs: typeof pages_breadcrumbs
  pages: typeof pages
  pages_locales: typeof pages_locales
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_version_hero_logos: typeof _pages_v_version_hero_logos
  _pages_v_blocks_apps_block_header_links: typeof _pages_v_blocks_apps_block_header_links
  _pages_v_blocks_apps_body_links: typeof _pages_v_blocks_apps_body_links
  _pages_v_blocks_apps: typeof _pages_v_blocks_apps
  _pages_v_blocks_cta_block_header_links: typeof _pages_v_blocks_cta_block_header_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_block_header_links: typeof _pages_v_blocks_content_block_header_links
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v_blocks_styled_list_items: typeof _pages_v_blocks_styled_list_items
  _pages_v_blocks_styled_list: typeof _pages_v_blocks_styled_list
  _pages_v_blocks_testimonials_block_header_links: typeof _pages_v_blocks_testimonials_block_header_links
  _pages_v_blocks_testimonials: typeof _pages_v_blocks_testimonials
  _pages_v_blocks_features_block_header_links: typeof _pages_v_blocks_features_block_header_links
  _pages_v_blocks_features_columns: typeof _pages_v_blocks_features_columns
  _pages_v_blocks_features: typeof _pages_v_blocks_features
  _pages_v_blocks_faq_block_block_header_links: typeof _pages_v_blocks_faq_block_block_header_links
  _pages_v_blocks_faq_block: typeof _pages_v_blocks_faq_block
  _pages_v_blocks_gallery_block_header_links: typeof _pages_v_blocks_gallery_block_header_links
  _pages_v_blocks_gallery_images: typeof _pages_v_blocks_gallery_images
  _pages_v_blocks_gallery: typeof _pages_v_blocks_gallery
  _pages_v_version_breadcrumbs: typeof _pages_v_version_breadcrumbs
  _pages_v: typeof _pages_v
  _pages_v_locales: typeof _pages_v_locales
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_locales: typeof posts_locales
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_locales: typeof _posts_v_locales
  _posts_v_rels: typeof _posts_v_rels
  apps_hero_links: typeof apps_hero_links
  apps_hero_logos: typeof apps_hero_logos
  apps_features: typeof apps_features
  apps_features_locales: typeof apps_features_locales
  apps: typeof apps
  apps_locales: typeof apps_locales
  apps_rels: typeof apps_rels
  _apps_v_version_hero_links: typeof _apps_v_version_hero_links
  _apps_v_version_hero_logos: typeof _apps_v_version_hero_logos
  _apps_v_version_features: typeof _apps_v_version_features
  _apps_v_version_features_locales: typeof _apps_v_version_features_locales
  _apps_v: typeof _apps_v
  _apps_v_locales: typeof _apps_v_locales
  _apps_v_rels: typeof _apps_v_rels
  solutions: typeof solutions
  solutions_locales: typeof solutions_locales
  solutions_rels: typeof solutions_rels
  _solutions_v: typeof _solutions_v
  _solutions_v_locales: typeof _solutions_v_locales
  _solutions_v_rels: typeof _solutions_v_rels
  app_icons: typeof app_icons
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  categories_locales: typeof categories_locales
  media_categories: typeof media_categories
  users: typeof users
  testimonials_stats: typeof testimonials_stats
  testimonials_stats_locales: typeof testimonials_stats_locales
  testimonials: typeof testimonials
  testimonials_locales: typeof testimonials_locales
  testimonials_rels: typeof testimonials_rels
  _testimonials_v_version_stats: typeof _testimonials_v_version_stats
  _testimonials_v_version_stats_locales: typeof _testimonials_v_version_stats_locales
  _testimonials_v: typeof _testimonials_v
  _testimonials_v_locales: typeof _testimonials_v_locales
  _testimonials_v_rels: typeof _testimonials_v_rels
  faq: typeof faq
  faq_locales: typeof faq_locales
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_checkbox_locales: typeof forms_blocks_checkbox_locales
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_country_locales: typeof forms_blocks_country_locales
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_email_locales: typeof forms_blocks_email_locales
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_message_locales: typeof forms_blocks_message_locales
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_number_locales: typeof forms_blocks_number_locales
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select_options_locales: typeof forms_blocks_select_options_locales
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_select_locales: typeof forms_blocks_select_locales
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_state_locales: typeof forms_blocks_state_locales
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_text_locales: typeof forms_blocks_text_locales
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_blocks_textarea_locales: typeof forms_blocks_textarea_locales
  forms_emails: typeof forms_emails
  forms_emails_locales: typeof forms_emails_locales
  forms: typeof forms
  forms_locales: typeof forms_locales
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_locales: typeof search_locales
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_tabs_description_links: typeof header_tabs_description_links
  header_tabs_description_links_locales: typeof header_tabs_description_links_locales
  header_tabs_nav_items_featured_link_links: typeof header_tabs_nav_items_featured_link_links
  header_tabs_nav_items_featured_link_links_locales: typeof header_tabs_nav_items_featured_link_links_locales
  header_tabs_nav_items_list_links_links: typeof header_tabs_nav_items_list_links_links
  header_tabs_nav_items_list_links_links_locales: typeof header_tabs_nav_items_list_links_links_locales
  header_tabs_nav_items: typeof header_tabs_nav_items
  header_tabs_nav_items_locales: typeof header_tabs_nav_items_locales
  header_tabs: typeof header_tabs
  header_tabs_locales: typeof header_tabs_locales
  header_cta: typeof header_cta
  header_cta_locales: typeof header_cta_locales
  header: typeof header
  header_rels: typeof header_rels
  footer_columns_nav_items: typeof footer_columns_nav_items
  footer_columns_nav_items_locales: typeof footer_columns_nav_items_locales
  footer_columns: typeof footer_columns
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_hero_logos: typeof relations_pages_hero_logos
  relations_pages_blocks_apps_block_header_links: typeof relations_pages_blocks_apps_block_header_links
  relations_pages_blocks_apps_body_links: typeof relations_pages_blocks_apps_body_links
  relations_pages_blocks_apps: typeof relations_pages_blocks_apps
  relations_pages_blocks_cta_block_header_links: typeof relations_pages_blocks_cta_block_header_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_block_header_links: typeof relations_pages_blocks_content_block_header_links
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_blocks_styled_list_items: typeof relations_pages_blocks_styled_list_items
  relations_pages_blocks_styled_list: typeof relations_pages_blocks_styled_list
  relations_pages_blocks_testimonials_block_header_links: typeof relations_pages_blocks_testimonials_block_header_links
  relations_pages_blocks_testimonials: typeof relations_pages_blocks_testimonials
  relations_pages_blocks_features_block_header_links: typeof relations_pages_blocks_features_block_header_links
  relations_pages_blocks_features_columns: typeof relations_pages_blocks_features_columns
  relations_pages_blocks_features: typeof relations_pages_blocks_features
  relations_pages_blocks_faq_block_block_header_links: typeof relations_pages_blocks_faq_block_block_header_links
  relations_pages_blocks_faq_block: typeof relations_pages_blocks_faq_block
  relations_pages_blocks_gallery_block_header_links: typeof relations_pages_blocks_gallery_block_header_links
  relations_pages_blocks_gallery_images: typeof relations_pages_blocks_gallery_images
  relations_pages_blocks_gallery: typeof relations_pages_blocks_gallery
  relations_pages_breadcrumbs: typeof relations_pages_breadcrumbs
  relations_pages_locales: typeof relations_pages_locales
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_version_hero_logos: typeof relations__pages_v_version_hero_logos
  relations__pages_v_blocks_apps_block_header_links: typeof relations__pages_v_blocks_apps_block_header_links
  relations__pages_v_blocks_apps_body_links: typeof relations__pages_v_blocks_apps_body_links
  relations__pages_v_blocks_apps: typeof relations__pages_v_blocks_apps
  relations__pages_v_blocks_cta_block_header_links: typeof relations__pages_v_blocks_cta_block_header_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_block_header_links: typeof relations__pages_v_blocks_content_block_header_links
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_blocks_styled_list_items: typeof relations__pages_v_blocks_styled_list_items
  relations__pages_v_blocks_styled_list: typeof relations__pages_v_blocks_styled_list
  relations__pages_v_blocks_testimonials_block_header_links: typeof relations__pages_v_blocks_testimonials_block_header_links
  relations__pages_v_blocks_testimonials: typeof relations__pages_v_blocks_testimonials
  relations__pages_v_blocks_features_block_header_links: typeof relations__pages_v_blocks_features_block_header_links
  relations__pages_v_blocks_features_columns: typeof relations__pages_v_blocks_features_columns
  relations__pages_v_blocks_features: typeof relations__pages_v_blocks_features
  relations__pages_v_blocks_faq_block_block_header_links: typeof relations__pages_v_blocks_faq_block_block_header_links
  relations__pages_v_blocks_faq_block: typeof relations__pages_v_blocks_faq_block
  relations__pages_v_blocks_gallery_block_header_links: typeof relations__pages_v_blocks_gallery_block_header_links
  relations__pages_v_blocks_gallery_images: typeof relations__pages_v_blocks_gallery_images
  relations__pages_v_blocks_gallery: typeof relations__pages_v_blocks_gallery
  relations__pages_v_version_breadcrumbs: typeof relations__pages_v_version_breadcrumbs
  relations__pages_v_locales: typeof relations__pages_v_locales
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_locales: typeof relations_posts_locales
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_locales: typeof relations__posts_v_locales
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_apps_hero_links: typeof relations_apps_hero_links
  relations_apps_hero_logos: typeof relations_apps_hero_logos
  relations_apps_features_locales: typeof relations_apps_features_locales
  relations_apps_features: typeof relations_apps_features
  relations_apps_locales: typeof relations_apps_locales
  relations_apps_rels: typeof relations_apps_rels
  relations_apps: typeof relations_apps
  relations__apps_v_version_hero_links: typeof relations__apps_v_version_hero_links
  relations__apps_v_version_hero_logos: typeof relations__apps_v_version_hero_logos
  relations__apps_v_version_features_locales: typeof relations__apps_v_version_features_locales
  relations__apps_v_version_features: typeof relations__apps_v_version_features
  relations__apps_v_locales: typeof relations__apps_v_locales
  relations__apps_v_rels: typeof relations__apps_v_rels
  relations__apps_v: typeof relations__apps_v
  relations_solutions_locales: typeof relations_solutions_locales
  relations_solutions_rels: typeof relations_solutions_rels
  relations_solutions: typeof relations_solutions
  relations__solutions_v_locales: typeof relations__solutions_v_locales
  relations__solutions_v_rels: typeof relations__solutions_v_rels
  relations__solutions_v: typeof relations__solutions_v
  relations_app_icons: typeof relations_app_icons
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories_locales: typeof relations_categories_locales
  relations_categories: typeof relations_categories
  relations_media_categories: typeof relations_media_categories
  relations_users: typeof relations_users
  relations_testimonials_stats_locales: typeof relations_testimonials_stats_locales
  relations_testimonials_stats: typeof relations_testimonials_stats
  relations_testimonials_locales: typeof relations_testimonials_locales
  relations_testimonials_rels: typeof relations_testimonials_rels
  relations_testimonials: typeof relations_testimonials
  relations__testimonials_v_version_stats_locales: typeof relations__testimonials_v_version_stats_locales
  relations__testimonials_v_version_stats: typeof relations__testimonials_v_version_stats
  relations__testimonials_v_locales: typeof relations__testimonials_v_locales
  relations__testimonials_v_rels: typeof relations__testimonials_v_rels
  relations__testimonials_v: typeof relations__testimonials_v
  relations_faq_locales: typeof relations_faq_locales
  relations_faq: typeof relations_faq
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox_locales: typeof relations_forms_blocks_checkbox_locales
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country_locales: typeof relations_forms_blocks_country_locales
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email_locales: typeof relations_forms_blocks_email_locales
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message_locales: typeof relations_forms_blocks_message_locales
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number_locales: typeof relations_forms_blocks_number_locales
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options_locales: typeof relations_forms_blocks_select_options_locales
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select_locales: typeof relations_forms_blocks_select_locales
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state_locales: typeof relations_forms_blocks_state_locales
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text_locales: typeof relations_forms_blocks_text_locales
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea_locales: typeof relations_forms_blocks_textarea_locales
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails_locales: typeof relations_forms_emails_locales
  relations_forms_emails: typeof relations_forms_emails
  relations_forms_locales: typeof relations_forms_locales
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_locales: typeof relations_search_locales
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_tabs_description_links_locales: typeof relations_header_tabs_description_links_locales
  relations_header_tabs_description_links: typeof relations_header_tabs_description_links
  relations_header_tabs_nav_items_featured_link_links_locales: typeof relations_header_tabs_nav_items_featured_link_links_locales
  relations_header_tabs_nav_items_featured_link_links: typeof relations_header_tabs_nav_items_featured_link_links
  relations_header_tabs_nav_items_list_links_links_locales: typeof relations_header_tabs_nav_items_list_links_links_locales
  relations_header_tabs_nav_items_list_links_links: typeof relations_header_tabs_nav_items_list_links_links
  relations_header_tabs_nav_items_locales: typeof relations_header_tabs_nav_items_locales
  relations_header_tabs_nav_items: typeof relations_header_tabs_nav_items
  relations_header_tabs_locales: typeof relations_header_tabs_locales
  relations_header_tabs: typeof relations_header_tabs
  relations_header_cta_locales: typeof relations_header_cta_locales
  relations_header_cta: typeof relations_header_cta
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_columns_nav_items_locales: typeof relations_footer_columns_nav_items_locales
  relations_footer_columns_nav_items: typeof relations_footer_columns_nav_items
  relations_footer_columns: typeof relations_footer_columns
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-vercel-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
