/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    archiveBlock: ArchiveBlock;
    callToActionBlock: CallToActionBlock;
    customHtmlBlock: CustomHtmlBlock;
    dividerBlock: DividerBlock;
    faqBlock: FaqBlock;
    featuresBlock: FeaturesBlock;
    featuredAppsBlock: FeaturedAppsBlock;
    galleryBlock: GalleryBlock;
    formBlock: FormBlock;
    logosBlock: LogoBlock;
    mediaBlock: MediaBlock;
    metricsBlock: MetricsBlock;
    richTextBlock: RichTextBlock;
    styledListBlock: StyledListBlock;
    testimonialsBlock: TestimonialsBlock;
  };
  collections: {
    pages: Page;
    posts: Post;
    solutions: Solution;
    integrations: Integration;
    media: Media;
    customers: Customer;
    categories: Category;
    faq: Faq;
    changelog: Changelog;
    users: User;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    solutions: SolutionsSelect<false> | SolutionsSelect<true>;
    integrations: IntegrationsSelect<false> | IntegrationsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    customers: CustomersSelect<false> | CustomersSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    faq: FaqSelect<false> | FaqSelect<true>;
    changelog: ChangelogSelect<false> | ChangelogSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    settings: Setting;
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: 'en' | 'ar';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archiveBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  locale?: ('en' | 'ar') | null;
  category?: (string | Category)[] | null;
  blurhash?: string | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  type: '01' | '02' | '03' | '04' | '05' | '06' | '07';
  badge?: {
    type?: ('label' | 'reference') | null;
    label?: string | null;
    color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
    reference?:
      | ({
          relationTo: 'solutions';
          value: string | Solution;
        } | null)
      | ({
          relationTo: 'integrations';
          value: string | Integration;
        } | null);
    /**
     * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
     */
    icon?: string | null;
    icon_position?: ('flex-row' | 'flex-row-reverse') | null;
  };
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  media?: {
    desktop?: {
      light?: (string | null) | Media;
      dark?: (string | null) | Media;
    };
    /**
     * Optional
     */
    mobile?: {
      light?: (string | null) | Media;
      dark?: (string | null) | Media;
    };
  };
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose the button style.
           */
          color?: ('brand' | 'neutral') | null;
          /**
           * Choose how the link should be rendered.
           */
          variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
        };
        id?: string | null;
      }[]
    | null;
  caption?: string | null;
  list?:
    | {
        /**
         * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
         */
        icon?: string | null;
        title?: string | null;
        subtitle?: string | null;
        id?: string | null;
      }[]
    | null;
  form?: (string | null) | Form;
  id?: string | null;
  blockName?: string | null;
  blockType: 'callToActionBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions".
 */
export interface Solution {
  id: string;
  /**
   * Internal page title used to identify this entry in the CMS and generate the URL slug. English only.
   */
  title: string;
  /**
   * Upload an icon for the solution. 500x500px recommended. Only media with category "app-icons" will be shown.
   */
  icon?: (string | null) | Media;
  name?: string | null;
  tagline?: string | null;
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'solutions';
          value: string | Solution;
        } | null);
    url?: string | null;
    label: string;
  };
  publishedAt?: string | null;
  /**
   * Link this item to an ecosystem category. The list is filtered to show only categories from the "ecosystems" family.
   */
  ecosystem?: (string | null) | Category;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  /**
   * Internal page title used to identify this entry in the CMS and generate the URL slug. English only.
   */
  title: string;
  hero: {
    type: 'hero01' | 'hero02' | 'hero03' | 'hero04' | 'hero05' | 'none';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
    caption?: string | null;
    media?: {
      desktop?: {
        light?: (string | null) | Media;
        dark?: (string | null) | Media;
      };
      /**
       * Optional
       */
      mobile?: {
        light?: (string | null) | Media;
        dark?: (string | null) | Media;
      };
    };
    logos?: {
      headline?: string | null;
      logos?: (string | Media)[] | null;
    };
  };
  layout: (
    | ArchiveBlock
    | CallToActionBlock
    | CustomHtmlBlock
    | DividerBlock
    | FaqBlock
    | FeaturedAppsBlock
    | FeaturesBlock
    | FormBlock
    | GalleryBlock
    | LogoBlock
    | MetricsBlock
    | RichTextBlock
    | TestimonialsBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations".
 */
export interface Integration {
  id: string;
  /**
   * Internal page title used to identify this entry in the CMS and generate the URL slug. English only.
   */
  title: string;
  /**
   * Upload an icon for the solution. 500x500px recommended. Only media with category "app-icons" will be shown.
   */
  icon?: (string | null) | Media;
  name?: string | null;
  tagline?: string | null;
  summary?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'solutions';
          value: string | Solution;
        } | null);
    url?: string | null;
    label: string;
  };
  company: {
    /**
     * Name of the company providing the integration.
     */
    name: string;
    /**
     * Contact email for the integration.
     */
    email: string;
    /**
     * Contact phone number for the integration.
     */
    phone?: string | null;
  };
  /**
   * URL to the documentation for the integration.
   */
  docsLink: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'solutions';
          value: string | Solution;
        } | null);
    url?: string | null;
    label: string;
  };
  hero?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose the button style.
           */
          color?: ('brand' | 'neutral') | null;
          /**
           * Choose how the link should be rendered.
           */
          variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
        };
        id?: string | null;
      }[]
    | null;
  caption?: string | null;
  layout?:
    | (
        | ArchiveBlock
        | CallToActionBlock
        | CustomHtmlBlock
        | DividerBlock
        | FaqBlock
        | FeaturedAppsBlock
        | FeaturesBlock
        | FormBlock
        | GalleryBlock
        | LogoBlock
        | RichTextBlock
        | TestimonialsBlock
      )[]
    | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  ecosystem?: (string | Category)[] | null;
  categories?: (string | Category)[] | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomHtmlBlock".
 */
export interface CustomHtmlBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Enter the custom HTML code to be rendered on the page.
   */
  htmlContent: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customHtmlBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DividerBlock".
 */
export interface DividerBlock {
  size: 'small' | 'medium' | 'large';
  enableDivider: boolean;
  id?: string | null;
  blockName?: string | null;
  blockType: 'dividerBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FaqBlock".
 */
export interface FaqBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02';
  faqs: (string | Faq)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'faqBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq".
 */
export interface Faq {
  id: string;
  question?: string | null;
  answer?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  category?: (string | null) | Category;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturedAppsBlock".
 */
export interface FeaturedAppsBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02' | '03' | '04' | '05' | '06';
  media?: (string | null) | Media;
  /**
   * Select the apps to link to.
   */
  apps?:
    | {
        relationTo: 'integrations';
        value: string | Integration;
      }[]
    | null;
  cards?:
    | {
        title?: string | null;
        description?: string | null;
        appReference?:
          | (
              | {
                  relationTo: 'integrations';
                  value: string | Integration;
                }
              | {
                  relationTo: 'solutions';
                  value: string | Solution;
                }
            )[]
          | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featuredAppsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesBlock".
 */
export interface FeaturesBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type:
    | '01'
    | '02'
    | '03'
    | '04'
    | '05'
    | '06'
    | '07'
    | '08'
    | '09'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '17';
  blockImage?: (string | null) | Media;
  /**
   * Extra text to display alongside the link
   */
  CTALabel?: string | null;
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'solutions';
          value: string | Solution;
        } | null);
    url?: string | null;
    label: string;
  };
  columns?:
    | {
        size?: ('half' | 'full' | 'oneThird' | 'twoThirds' | 'sixtyPercent' | 'fortyPercent') | null;
        appReference?:
          | ({
              relationTo: 'solutions';
              value: string | Solution;
            } | null)
          | ({
              relationTo: 'integrations';
              value: string | Integration;
            } | null);
        image?: (string | null) | Media;
        tabLabel?: string | null;
        icon?: string | null;
        content?: {
          title: string;
          subtitle?: string | null;
        };
        richTextContent?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableBadge?: boolean | null;
        enableCta?: boolean | null;
        reverseOrder?: boolean | null;
        badge?: {
          type?: ('label' | 'reference') | null;
          label?: string | null;
          color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
          reference?:
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null)
            | ({
                relationTo: 'integrations';
                value: string | Integration;
              } | null);
          /**
           * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
           */
          icon?: string | null;
          icon_position?: ('flex-row' | 'flex-row-reverse') | null;
        };
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null);
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featuresBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock".
 */
export interface GalleryBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  /**
   * Select the layout for the gallery.
   */
  type: '01' | '02' | '03' | '04';
  /**
   * Select or upload images for the gallery.
   */
  images?: (string | Media)[] | null;
  interactiveGallery?:
    | {
        /**
         * Select or upload an image for the gallery.
         */
        image: string | Media;
        /**
         * Title and description for the transition panel.
         */
        panel?: {
          title?: string | null;
          description?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'galleryBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogoBlock".
 */
export interface LogoBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02' | '03';
  logos?: (string | Media)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'logosBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RichTextBlock".
 */
export interface RichTextBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02';
  /**
   * Controls the maximum width of the content container
   */
  maxWidth?: ('default' | 'small' | 'large' | 'full') | null;
  /**
   * Controls the number of columns in the content
   */
  columns: number;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'richTextBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialsBlock".
 */
export interface TestimonialsBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02' | '03';
  /**
   * Select specific testimonials to display. Leave blank to show the 5 most recently updated testimonials.
   */
  selectedTestimonials?: (string | Customer)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonialsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers".
 */
export interface Customer {
  id: string;
  /**
   * Internal page title used to identify this entry in the CMS and generate the URL slug. English only.
   */
  title: string;
  testimonial: {
    quote: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    featuredImage?: (string | null) | Media;
    featuredSolutions?: (string | Solution)[] | null;
    featuredIntegrations?: (string | Integration)[] | null;
    stats?:
      | {
          /**
           * Label for the stat
           */
          label?: string | null;
          /**
           * Value for the stat. Example: 85% or 250 SAR
           */
          value?: string | null;
          /**
           * Whether the value is an increase or decrease
           */
          indicator?: ('increase' | 'decrease' | 'noChange') | null;
          id?: string | null;
        }[]
      | null;
    company: {
      /**
       * Auto-generated from title
       */
      companyName: string;
      companyLogo?: (string | null) | Media;
      link: {
        type?: ('reference' | 'custom') | null;
        newTab?: boolean | null;
        reference?:
          | ({
              relationTo: 'pages';
              value: string | Page;
            } | null)
          | ({
              relationTo: 'posts';
              value: string | Post;
            } | null)
          | ({
              relationTo: 'solutions';
              value: string | Solution;
            } | null);
        url?: string | null;
        label: string;
      };
      industry?: ('restaurants' | 'retail' | 'services') | null;
      foundingYear?: number | null;
      location?: string | null;
      /**
       * Number of branches or locations. Example: 5+
       */
      branches?: string | null;
    };
    authorInfo: {
      name: string;
      title?: string | null;
      /**
       * Avatar image for the testimonial author. Minimum 300x300px recommended.
       */
      avatar?: (string | null) | Media;
    };
  };
  caseStudy?: {
    caseStudytitle: string;
    summary: string;
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    layout?:
      | (
          | ArchiveBlock
          | CallToActionBlock
          | CustomHtmlBlock
          | DividerBlock
          | FaqBlock
          | FeaturedAppsBlock
          | FeaturesBlock
          | FormBlock
          | GalleryBlock
          | LogoBlock
          | RichTextBlock
          | TestimonialsBlock
        )[]
      | null;
  };
  enableCaseStudy?: boolean | null;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * Categories to help organize testimonials
   */
  categories?: (string | Category)[] | null;
  publishedAt?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MetricsBlock".
 */
export interface MetricsBlock {
  blockHeader: {
    type: 'center' | 'split' | 'start';
    badge?: {
      type?: ('label' | 'reference') | null;
      label?: string | null;
      color?: ('blue' | 'red' | 'green' | 'yellow' | 'gray' | 'inverted') | null;
      reference?:
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null)
        | ({
            relationTo: 'integrations';
            value: string | Integration;
          } | null);
      /**
       * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
       */
      icon?: string | null;
      icon_position?: ('flex-row' | 'flex-row-reverse') | null;
    };
    headerText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null)
              | ({
                  relationTo: 'solutions';
                  value: string | Solution;
                } | null);
            url?: string | null;
            label: string;
            /**
             * Choose the button style.
             */
            color?: ('brand' | 'neutral') | null;
            /**
             * Choose how the link should be rendered.
             */
            variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  type: '01' | '02' | '03';
  blockImage?: {
    media?: (string | null) | Media;
  };
  stats?:
    | {
        /**
         * Label for the stat
         */
        label?: string | null;
        /**
         * Value for the stat. Example: 85% or 250 SAR
         */
        value?: string | null;
        /**
         * Whether the value is an increase or decrease
         */
        indicator?: ('increase' | 'decrease' | 'noChange') | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Use Google Sheets to generate the table data, convert that into JSON, and paste here.
   */
  table?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  enableLogos?: boolean | null;
  logos?: {
    headline?: string | null;
    logos?: (string | Media)[] | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'metricsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StyledListBlock".
 */
export interface StyledListBlock {
  listStyle?: ('bullet' | 'check' | 'numbered' | 'feature') | null;
  items: {
    text: string;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'styledListBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "changelog".
 */
export interface Changelog {
  id: string;
  /**
   * Title of the changelog entry.
   */
  title: string;
  /**
   * Date of the changelog entry.
   */
  date: string;
  /**
   * Version number associated with the changelog entry.
   */
  version: string;
  /**
   * Detailed description of the changes.
   */
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Categories for the changelog entry.
   */
  categories?: ('bug-fix' | 'feature' | 'improvement' | 'security' | 'other')[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'solutions';
        value: string | Solution;
      } | null)
    | ({
        relationTo: 'integrations';
        value: string | Integration;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'customers';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'faq';
        value: string | Faq;
      } | null)
    | ({
        relationTo: 'changelog';
        value: string | Changelog;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        badge?:
          | T
          | {
              type?: T;
              label?: T;
              color?: T;
              reference?: T;
              icon?: T;
              icon_position?: T;
            };
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    color?: T;
                    variant?: T;
                  };
              id?: T;
            };
        caption?: T;
        media?:
          | T
          | {
              desktop?:
                | T
                | {
                    light?: T;
                    dark?: T;
                  };
              mobile?:
                | T
                | {
                    light?: T;
                    dark?: T;
                  };
            };
        logos?:
          | T
          | {
              headline?: T;
              logos?: T;
            };
      };
  layout?: T | {};
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions_select".
 */
export interface SolutionsSelect<T extends boolean = true> {
  title?: T;
  icon?: T;
  name?: T;
  tagline?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
      };
  publishedAt?: T;
  ecosystem?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrations_select".
 */
export interface IntegrationsSelect<T extends boolean = true> {
  title?: T;
  icon?: T;
  name?: T;
  tagline?: T;
  summary?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
      };
  company?:
    | T
    | {
        name?: T;
        email?: T;
        phone?: T;
      };
  docsLink?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
      };
  hero?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              color?: T;
              variant?: T;
            };
        id?: T;
      };
  caption?: T;
  layout?: T | {};
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  ecosystem?: T;
  categories?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  locale?: T;
  category?: T;
  blurhash?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customers_select".
 */
export interface CustomersSelect<T extends boolean = true> {
  title?: T;
  testimonial?:
    | T
    | {
        quote?: T;
        featuredImage?: T;
        featuredSolutions?: T;
        featuredIntegrations?: T;
        stats?:
          | T
          | {
              label?: T;
              value?: T;
              indicator?: T;
              id?: T;
            };
        company?:
          | T
          | {
              companyName?: T;
              companyLogo?: T;
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              industry?: T;
              foundingYear?: T;
              location?: T;
              branches?: T;
            };
        authorInfo?:
          | T
          | {
              name?: T;
              title?: T;
              avatar?: T;
            };
      };
  caseStudy?:
    | T
    | {
        caseStudytitle?: T;
        summary?: T;
        content?: T;
        layout?: T | {};
      };
  enableCaseStudy?: T;
  slug?: T;
  slugLock?: T;
  categories?: T;
  publishedAt?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq_select".
 */
export interface FaqSelect<T extends boolean = true> {
  question?: T;
  answer?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "changelog_select".
 */
export interface ChangelogSelect<T extends boolean = true> {
  title?: T;
  date?: T;
  version?: T;
  description?: T;
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  announcementBar: {
    text?: string | null;
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: string | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: string | Post;
          } | null)
        | ({
            relationTo: 'solutions';
            value: string | Solution;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  customHeadHtml?: string | null;
  customBodyHtml?: string | null;
  tagManagerId?: string | null;
  analyticsScripts?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  tabs?:
    | {
        label: string;
        enableDirectLink?: boolean | null;
        enableDropdown?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null);
          url?: string | null;
        };
        description?: string | null;
        descriptionLinks?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null)
                  | ({
                      relationTo: 'solutions';
                      value: string | Solution;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        navItems?:
          | {
              style?: ('default' | 'featured' | 'list') | null;
              defaultLink?: {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: string | Page;
                      } | null)
                    | ({
                        relationTo: 'posts';
                        value: string | Post;
                      } | null)
                    | ({
                        relationTo: 'solutions';
                        value: string | Solution;
                      } | null);
                  url?: string | null;
                  label: string;
                  /**
                   * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
                   */
                  icon?: string | null;
                };
                description?: string | null;
              };
              featuredLink?: {
                tag?: string | null;
                label?: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                } | null;
                links?:
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: string | Page;
                            } | null)
                          | ({
                              relationTo: 'posts';
                              value: string | Post;
                            } | null)
                          | ({
                              relationTo: 'solutions';
                              value: string | Solution;
                            } | null);
                        url?: string | null;
                        label: string;
                        /**
                         * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
                         */
                        icon?: string | null;
                      };
                      id?: string | null;
                    }[]
                  | null;
              };
              listLinks?: {
                tag?: string | null;
                links?:
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: string | Page;
                            } | null)
                          | ({
                              relationTo: 'posts';
                              value: string | Post;
                            } | null)
                          | ({
                              relationTo: 'solutions';
                              value: string | Solution;
                            } | null);
                        url?: string | null;
                        label: string;
                        description?: string | null;
                        /**
                         * Select an icon from the Lucide icon set. You can preview all available icons at https://lucide.dev/icons/
                         */
                        icon?: string | null;
                      };
                      id?: string | null;
                    }[]
                  | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  cta?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null)
            | ({
                relationTo: 'solutions';
                value: string | Solution;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose the button style.
           */
          color?: ('brand' | 'neutral') | null;
          /**
           * Choose how the link should be rendered.
           */
          variant?: ('primary' | 'secondary' | 'tertiary' | 'ghost' | 'link') | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  columns?:
    | {
        label: string;
        navItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: string | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: string | Post;
                    } | null)
                  | ({
                      relationTo: 'solutions';
                      value: string | Solution;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  announcementBar?:
    | T
    | {
        text?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  customHeadHtml?: T;
  customBodyHtml?: T;
  tagManagerId?: T;
  analyticsScripts?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  tabs?:
    | T
    | {
        label?: T;
        enableDirectLink?: T;
        enableDropdown?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        description?: T;
        descriptionLinks?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        navItems?:
          | T
          | {
              style?: T;
              defaultLink?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                          icon?: T;
                        };
                    description?: T;
                  };
              featuredLink?:
                | T
                | {
                    tag?: T;
                    label?: T;
                    links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                                icon?: T;
                              };
                          id?: T;
                        };
                  };
              listLinks?:
                | T
                | {
                    tag?: T;
                    links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                                description?: T;
                                icon?: T;
                              };
                          id?: T;
                        };
                  };
              id?: T;
            };
        id?: T;
      };
  cta?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              color?: T;
              variant?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        label?: T;
        navItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null)
      | ({
          relationTo: 'integrations';
          value: string | Integration;
        } | null)
      | ({
          relationTo: 'faq';
          value: string | Faq;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}